/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å–º–µ—Ç—ã —Å —Ä–∞—Å—Ü–µ–Ω–∫–∞–º–∏
 *
 * –õ–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Ç–æ–ª—å–∫–æ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
 * - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: 50-100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫)
 */

export interface EstimateRow {
  workName: string
  unit: string
  volume: number
  subcategory?: string
  category?: string
  description?: string
}

export interface Rate {
  id: string
  code: string
  name: string
  description?: string
  unit_name: string
  base_price: number
  category?: string
  subcategory?: string
  is_active: boolean
}

export interface RateMatchResult {
  rateId: string
  rateName: string
  rateCode: string
  score: number
  matchType: 'exact_name' | 'high_similarity' | 'medium_similarity' | 'low_similarity'
  categoryMatch: boolean
  subcategoryMatch: boolean
  unitMatch: boolean
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 */
function normalizeText(text: string | undefined | null): string {
  if (!text) return ''
  return text
    .toLowerCase()
    .trim()
    .replace(/[^\w–∞-—è—ë\s]/gi, ' ')
    .replace(/\s+/g, ' ')
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ (–∞–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
 */
function calculateSimilarity(str1: string, str2: string): number {
  const s1 = normalizeText(str1)
  const s2 = normalizeText(str2)

  if (s1 === s2) return 1.0

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä—É–≥—É—é
  if (s1.includes(s2) || s2.includes(s1)) {
    const longer = Math.max(s1.length, s2.length)
    const shorter = Math.min(s1.length, s2.length)
    return shorter / longer
  }

  // –ê–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const matrix: number[][] = []

  for (let i = 0; i <= s2.length; i++) {
    matrix[i] = [i]
  }

  for (let j = 0; j <= s1.length; j++) {
    matrix[0][j] = j
  }

  for (let i = 1; i <= s2.length; i++) {
    for (let j = 1; j <= s1.length; j++) {
      if (s2.charAt(i - 1) === s1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1]
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // –∑–∞–º–µ–Ω–∞
          matrix[i][j - 1] + 1, // –≤—Å—Ç–∞–≤–∫–∞
          matrix[i - 1][j] + 1 // —É–¥–∞–ª–µ–Ω–∏–µ
        )
      }
    }
  }

  const distance = matrix[s2.length][s1.length]
  const maxLength = Math.max(s1.length, s2.length)
  return 1 - distance / maxLength
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (100%)
 */
function isCategoryExactMatch(
  estimateCategory: string | undefined,
  rateCategory: string | undefined
): boolean {
  if (!estimateCategory || !rateCategory) return false
  return normalizeText(estimateCategory) === normalizeText(rateCategory)
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (100%)
 */
function isSubcategoryExactMatch(
  estimateSubcategory: string | undefined,
  rateSubcategory: string | undefined
): boolean {
  if (!estimateSubcategory || !rateSubcategory) return false
  return (
    normalizeText(estimateSubcategory) === normalizeText(rateSubcategory)
  )
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
 */
function isUnitMatch(estimateUnit: string, rateUnit: string): boolean {
  const normalized1 = normalizeText(estimateUnit)
  const normalized2 = normalizeText(rateUnit)

  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (normalized1 === normalized2) return true

  // –û–±—â–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
  const unitSynonyms: Record<string, string[]> = {
    —à—Ç: ['—à—Ç', '—à—Ç—É–∫', '—à—Ç—É–∫–∞', '–µ–¥', '–µ–¥–∏–Ω–∏—Ü–∞'],
    –º: ['–º', '–º–µ—Ç—Ä', '–º–µ—Ç—Ä–æ–≤', '–ø–æ–≥–º', '–ø–æ–≥–æ–Ω–Ω—ã–π –º–µ—Ç—Ä'],
    –º2: ['–º2', '–∫–≤ –º', '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä', '–º –∫–≤'],
    –º3: ['–º3', '–∫—É–± –º', '–∫—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä', '–º –∫—É–±'],
    –∫–≥: ['–∫–≥', '–∫–∏–ª–æ–≥—Ä–∞–º–º', '–∫–≥'],
    —Ç: ['—Ç', '—Ç–æ–Ω–Ω–∞', '—Ç–æ–Ω–Ω'],
    –ª: ['–ª', '–ª–∏—Ç—Ä', '–ª–∏—Ç—Ä–æ–≤'],
  }

  for (const [canonical, synonyms] of Object.entries(unitSynonyms)) {
    if (synonyms.includes(normalized1) && synonyms.includes(normalized2)) {
      return true
    }
  }

  return false
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
 */
function getMatchType(score: number): RateMatchResult['matchType'] {
  if (score >= 0.95) return 'exact_name'
  if (score >= 0.75) return 'high_similarity'
  if (score >= 0.6) return 'medium_similarity'
  return 'low_similarity'
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã
 *
 * –ü–†–ê–í–ò–õ–ê:
 * 1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
 * 2. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - 50-100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫)
 * 3. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
 */
export function findMatchingRates(
  estimate: EstimateRow,
  rates: Rate[],
  minNameSimilarity: number = 0.5 // –ú–∏–Ω–∏–º—É–º 50% –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
): RateMatchResult[] {
  console.log('üîç Finding matching rates', {
    action: 'find_matching_rates',
    estimateName: estimate.workName,
    estimateSubcategory: estimate.subcategory,
    estimateCategory: estimate.category,
    estimateUnit: estimate.unit,
    ratesCount: rates.length,
    minNameSimilarity,
    timestamp: new Date().toISOString(),
  })

  // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —ç—Ç–æ –æ—à–∏–±–∫–∞
  if (!estimate.subcategory || !estimate.subcategory.trim()) {
    console.warn('‚ö†Ô∏è Subcategory is required but missing', {
      estimateName: estimate.workName,
    })
    return []
  }

  const matches: RateMatchResult[] = []

  for (const rate of rates) {
    // –ü–†–ê–í–ò–õ–û 1: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å—Ç—Ä–æ–≥–æ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const subcategoryMatch = isSubcategoryExactMatch(
      estimate.subcategory,
      rate.subcategory
    )

    if (!subcategoryMatch) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ü–µ–Ω–∫—É –µ—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      continue
    }

    // –ü–†–ê–í–ò–õ–û 2: –ö–∞—Ç–µ–≥–æ—Ä–∏—è - —Å—Ç—Ä–æ–≥–æ 100% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    let categoryMatch = true
    if (estimate.category && rate.category) {
      categoryMatch = isCategoryExactMatch(estimate.category, rate.category)
      if (!categoryMatch) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ü–µ–Ω–∫—É –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        continue
      }
    }

    // –ü–†–ê–í–ò–õ–û 3: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ 50-100%
    const nameSimilarity = calculateSimilarity(estimate.workName, rate.name)

    if (nameSimilarity < minNameSimilarity) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
      continue
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
    const unitMatch = isUnitMatch(estimate.unit, rate.unit_name)

    // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π score
    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ 100%, –ø–æ—ç—Ç–æ–º—É —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –µ–¥–∏–Ω–∏—Ü—ã
    let finalScore = nameSimilarity

    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è (+5%)
    if (unitMatch) {
      finalScore = Math.min(1.0, finalScore + 0.05)
    }

    const matchType = getMatchType(nameSimilarity)

    matches.push({
      rateId: rate.id,
      rateName: rate.name,
      rateCode: rate.code,
      score: finalScore,
      matchType,
      categoryMatch,
      subcategoryMatch,
      unitMatch,
    })
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
  matches.sort((a, b) => b.score - a.score)

  console.log('‚úÖ Matching completed', {
    action: 'matching_completed',
    estimateName: estimate.workName,
    matchesFound: matches.length,
    topScore: matches[0]?.score || 0,
    topMatch: matches[0]?.rateName || 'none',
    timestamp: new Date().toISOString(),
  })

  return matches
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
 */
export function getMatchQuality(
  match: RateMatchResult
): 'exact' | 'good' | 'acceptable' | 'poor' {
  if (match.score >= 0.95 && match.unitMatch) return 'exact'
  if (match.score >= 0.75) return 'good'
  if (match.score >= 0.6) return 'acceptable'
  return 'poor'
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatMatchInfo(match: RateMatchResult): string {
  const parts: string[] = []

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (match.categoryMatch) {
    parts.push('‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏—è')
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (match.subcategoryMatch) {
    parts.push('‚úì –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
  const namePercent = (match.score * 100).toFixed(0)
  parts.push(`–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${namePercent}%`)

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–¥–∏–Ω–∏—Ü–∞—Ö
  if (match.unitMatch) {
    parts.push('‚úì –ï–¥.–∏–∑–º.')
  } else {
    parts.push('‚ö† –†–∞–∑–Ω—ã–µ –µ–¥.–∏–∑–º.')
  }

  return parts.join(' ‚Ä¢ ')
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ Excel
 */
export function validateEstimateRow(row: EstimateRow): {
  isValid: boolean
  errors: string[]
} {
  const errors: string[] = []

  if (!row.workName || !row.workName.trim()) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç')
  }

  if (!row.unit || !row.unit.trim()) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è')
  }

  if (!row.volume || row.volume <= 0) {
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä—ë–º')
  }

  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï
  if (!row.subcategory || !row.subcategory.trim()) {
    errors.push('–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Å—Ç–æ–ª–±–µ—Ü 4)')
  }

  return {
    isValid: errors.length === 0,
    errors,
  }
}
