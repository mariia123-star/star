import React, { useState, useRef, useEffect, useCallback } from 'react'
import { useSearchParams } from 'react-router-dom'
import {
  Card,
  Button,
  Space,
  Input,
  Select,
  DatePicker,
  Row,
  Col,
  Modal,
  Upload,
  App,
  Tabs,
  TabsProps,
  message as antMessage,
  Form,
  InputNumber,
} from 'antd'
import {
  PlusOutlined,
  DownloadOutlined,
  UploadOutlined,
  DownOutlined,
  UpOutlined,
  FileTextOutlined,
  CalculatorOutlined,
  TableOutlined,
  DatabaseOutlined,
  SaveOutlined,
  GoogleOutlined,
  LinkOutlined,
} from '@ant-design/icons'
import {
  EstimatePosition,
  JUSTIFICATION_TYPES,
  UNITS,
  RateGroup,
} from '@/shared/types/estimate'
import EstimateTable from '@/widgets/estimate/EstimateTable'
import { useQuery } from '@tanstack/react-query'
import { RateAutocomplete } from '@/widgets/estimate'
import { ratesApi } from '@/entities/rates'
import { projectsApi } from '@/entities/projects'
import { supabase } from '@/lib/supabase'
import { useMaterialTypes } from '@/shared/hooks/useMaterialTypes'
import {
  getMaterialTypeByShortName,
  type MaterialType,
} from '@/entities/material-types'

const { Option } = Select

export default function TenderTest() {
  const { message } = App.useApp()
  const [searchParams] = useSearchParams()
  const estimateId = searchParams.get('estimateId') // –ü–æ–ª—É—á–∞–µ–º ID —Å–º–µ—Ç—ã –∏–∑ URL
  const isNewEstimate = searchParams.get('new') === 'true' // –§–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã
  const [activeTab, setActiveTab] = useState<string>('table')
  const [filtersExpanded, setFiltersExpanded] = useState(false)
  const [selectedPositions, setSelectedPositions] = useState<string[]>([])
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedProject, setSelectedProject] = useState<string>()
  const [selectedJustification, setSelectedJustification] = useState<string>()
  const [rateGroups, setRateGroups] = useState<RateGroup[]>([])
  const [isSaving, setIsSaving] = useState(false)
  const [googleSheetsModalVisible, setGoogleSheetsModalVisible] =
    useState(false)
  const [googleSheetsUrl, setGoogleSheetsUrl] = useState('')
  const [isAnalyzingSheet, setIsAnalyzingSheet] = useState(false)
  const [isTestingConnection, setIsTestingConnection] = useState(false)
  const [modifiedPositions, setModifiedPositions] = useState<Set<string>>(
    new Set()
  )
  const [isSavingChanges, setIsSavingChanges] = useState(false)
  const [currentDraftId, setCurrentDraftId] = useState<string | null>(null)
  const [draftName, setDraftName] = useState<string>('')
  const [editingCell, setEditingCell] = useState<{
    id: string
    field: string
  } | null>(null)
  const [addPositionModalVisible, setAddPositionModalVisible] = useState(false)
  const [materialsCount, setMaterialsCount] = useState(5)
  const [pendingParentId, setPendingParentId] = useState<string | undefined>(
    undefined
  )
  const [addMode, setAddMode] = useState<'rate' | 'manual'>('rate')
  const [selectedRateId, setSelectedRateId] = useState<string | null>(null)
  const [rateSearchTerm, setRateSearchTerm] = useState('')

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const { data: materialTypes = [], isLoading: materialTypesLoading } =
    useMaterialTypes()

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
  const { data: projects = [], isLoading: projectsLoading } = useQuery({
    queryKey: ['projects'],
    queryFn: projectsApi.getAll,
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const {
    data: drafts = [],
    isLoading: draftsLoading,
    refetch: refetchDrafts,
  } = useQuery({
    queryKey: ['estimate-drafts', selectedProject],
    queryFn: async () => {
      if (!selectedProject) return []

      const { data, error } = await supabase
        .from('estimate_drafts')
        .select('*')
        .eq('project_id', selectedProject)
        .eq('status', 'draft')
        .order('updated_at', { ascending: false })

      if (error) {
        console.error('Error loading drafts:', error)
        return []
      }

      return data || []
    },
    enabled: !!selectedProject,
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏ –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞
  const {
    data: rates = [],
    isLoading: ratesLoading,
    refetch: refetchRates,
  } = useQuery({
    queryKey: ['rates'],
    queryFn: ratesApi.getAll,
    refetchInterval: 30000, // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 5)
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  const { data: allMaterials = [] } = useQuery({
    queryKey: ['materials', 'all'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('materials')
        .select('*')
        .eq('is_active', true)

      if (error) {
        console.error('‚ùå Error loading materials:', error)
        return []
      }

      console.log('‚úÖ Loaded materials:', data?.length || 0)
      return data || []
    },
    enabled: true,
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ —Ä–∞—Å—Ü–µ–Ω–æ–∫ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
  const {
    data: allRateMaterials = {},
    isLoading: rateMaterialsLoading,
    refetch: refetchRateMaterials,
  } = useQuery({
    queryKey: ['rateMaterials', 'all'],
    queryFn: async () => {
      console.log('üì¶ Loading rate materials from database...')

      const { data, error } = await supabase
        .from('rate_materials_mapping')
        .select('*')
        .order('created_at', { ascending: false })

      if (error) {
        console.error('‚ùå Error loading rate materials:', error)
        return {}
      }

      console.log('‚úÖ Loaded rate materials mappings:', data?.length || 0)

      // –°–æ–∑–¥–∞–µ–º map –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const materialsMap = allMaterials.reduce(
        (acc: any, mat: any) => {
          acc[mat.id] = mat
          return acc
        },
        {} as Record<string, any>
      )

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ rate_id –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
      const grouped = data.reduce((acc: any, item: any) => {
        if (!acc[item.rate_id]) {
          acc[item.rate_id] = []
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ map
        const materialData = materialsMap[item.material_id]
        acc[item.rate_id].push({
          ...item,
          materials: materialData,
        })

        return acc
      }, {})

      console.log('üìä Grouped by rates:', Object.keys(grouped).length, 'rates')

      return grouped
    },
    enabled: true && allMaterials.length > 0, // –í–∫–ª—é—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    refetchInterval: 30000, // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  })

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  const handleAutoImportNewMaterial = useCallback(
    async (newMaterial: any) => {
      console.log('Auto-importing new material:', newMaterial)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è positions
      setPositions(currentPositions => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª
        if (currentPositions.some(p => p.id === `material-${newMaterial.id}`)) {
          console.log('Material already imported, skipping')
          return currentPositions
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        const materialPosition: EstimatePosition = {
          id: `material-${newMaterial.id}`,
          number: `${currentPositions.length + 1}`,
          justification: '–º–∞—Ç',
          materialType: materialTypes[0]?.short_name || '–æ—Å–Ω–æ–≤',
          workName: newMaterial.name,
          unit: newMaterial.unit_short_name || '–µ–¥',
          volume: 1,
          materialNorm: 1,
          workPrice: 0,
          materialPrice: newMaterial.last_purchase_price || 0,
          deliveryPrice: 0,
          total: newMaterial.last_purchase_price || 0,
          level: 0,
          created_at: new Date().toISOString(),
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        const newPositions = [...currentPositions, materialPosition]
        console.log('Auto-imported material position:', materialPosition)
        return newPositions
      })

      message.success(
        `–ú–∞—Ç–µ—Ä–∏–∞–ª "${newMaterial.name}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º`
      )
    },
    [message, materialTypes]
  )

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–π —Ä–∞—Å—Ü–µ–Ω–∫–∏
  const handleAutoImportNewRate = useCallback(
    async (newRate: any) => {
      console.log('Auto-importing new rate:', newRate)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–π —Ä–∞—Å—Ü–µ–Ω–∫–∏
      const { data: materials, error } = await supabase
        .from('rate_materials_mapping')
        .select(
          `
        *,
        material:materials!material_id(*)
      `
        )
        .eq('rate_id', newRate.id)

      if (error) {
        console.error('Error loading materials for new rate:', error)
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è positions
      setPositions(currentPositions => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞
        if (currentPositions.some(p => p.id === `rate-${newRate.id}`)) {
          console.log('Rate already imported, skipping')
          return currentPositions
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞—Å—Ü–µ–Ω–∫–∏
        const contractorPosition: EstimatePosition = {
          id: `rate-${newRate.id}`,
          number: `${currentPositions.length + 1}`,
          justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫',
          workName: newRate.name,
          unit: newRate.unit_short_name || '–∫–æ–º–ø–ª',
          volume: 1,
          workPrice: 0,
          total: 0,
          level: 0,
          expanded: true, // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
          created_at: new Date().toISOString(),
          children: [],
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
        const workPosition: EstimatePosition = {
          id: `rate-work-${newRate.id}`,
          number: `${currentPositions.length + 1}.1`,
          parentId: contractorPosition.id,
          justification: '—Ä–∞–±',
          workName: newRate.name,
          unit: newRate.unit_short_name || '–µ–¥',
          volume: 1,
          workPrice: newRate.base_price || 0,
          total: newRate.base_price || 0,
          level: 1,
          created_at: new Date().toISOString(),
        }

        contractorPosition.children?.push(workPosition)
        let totalCost = newRate.base_price || 0

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if (materials && materials.length > 0) {
          materials.forEach((material: any, index: number) => {
            const volume = material.consumption || 1
            const price = material.unit_price || 0
            const materialTotal = volume * price

            const materialPosition: EstimatePosition = {
              id: `rate-mat-${newRate.id}-${index}`,
              number: `${currentPositions.length + 1}.${index + 2}`,
              parentId: contractorPosition.id,
              justification: '–º–∞—Ç',
              materialType: materialTypes[0]?.short_name || '–æ—Å–Ω–æ–≤',
              workName: material.material?.name || '–ú–∞—Ç–µ—Ä–∏–∞–ª',
              unit: material.material?.unit_short_name || '–µ–¥',
              volume: volume,
              materialNorm: material.consumption || 1,
              workPrice: 0,
              materialPrice: price,
              deliveryPrice: 0,
              total: materialTotal,
              level: 1,
              created_at: new Date().toISOString(),
            }

            contractorPosition.children?.push(materialPosition)
            totalCost += materialTotal
          })
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
        contractorPosition.total = totalCost

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        const newPositions = [...currentPositions, contractorPosition]
        console.log('Auto-imported rate position:', contractorPosition)
        return newPositions
      })

      message.success(
        `–†–∞—Å—Ü–µ–Ω–∫–∞ "${newRate.name}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º`
      )
    },
    [message]
  )

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (modifiedPositions.size > 0 && selectedProject) {
      const timer = window.setTimeout(() => {
        console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...')
        handleSaveChanges()
      }, 5000)

      return () => window.clearTimeout(timer)
    }
  }, [modifiedPositions.size, selectedProject])

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ—Ç—ã –ø–æ ID –∏–∑ URL (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  useEffect(() => {
    const loadEstimateById = async () => {
      if (!estimateId) return

      console.log('üìÇ Loading estimate by ID from URL:', estimateId)

      try {
        const { data: estimate, error } = await supabase
          .from('estimate_drafts')
          .select('*')
          .eq('id', estimateId)
          .single()

        if (error) {
          console.error('‚ùå Error loading estimate:', error)
          message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç—ã')
          return
        }

        if (estimate) {
          console.log('‚úÖ Loaded estimate for editing:', {
            id: estimate.id,
            name: estimate.name,
            positionsCount: estimate.data?.positions?.length || 0,
          })

          setCurrentDraftId(estimate.id)
          setDraftName(estimate.name)
          setSelectedProject(estimate.project_id)

          if (
            estimate.data?.positions &&
            Array.isArray(estimate.data.positions)
          ) {
            setPositions(estimate.data.positions)
            message.success(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–º–µ—Ç–∞: ${estimate.name}`)
          }
        }
      } catch (error) {
        console.error('Error loading estimate:', error)
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç—ã')
      }
    }

    loadEstimateById()
  }, [estimateId])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
  useEffect(() => {
    const loadLastDraft = async () => {
      // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ—Ç—É –ø–æ ID, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
      if (estimateId) {
        console.log('Estimate ID provided, skipping draft load')
        return
      }

      // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ—Ç—É, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
      if (isNewEstimate) {
        console.log('Creating new estimate, skipping draft load')
        return
      }

      if (!selectedProject) {
        console.log('No project selected, skipping draft load')
        return
      }

      console.log('Loading last draft for project:', selectedProject)

      try {
        const { data: drafts, error } = await supabase
          .from('estimate_drafts')
          .select('*')
          .eq('project_id', selectedProject)
          .eq('status', 'draft')
          .order('updated_at', { ascending: false })
          .limit(1)

        if (error) {
          console.error('Error loading draft:', error)
          return
        }

        if (drafts && drafts.length > 0) {
          const draft = drafts[0]
          console.log(
            '‚úÖ Loaded draft:',
            draft.id,
            'with',
            draft.data?.positions?.length || 0,
            'positions'
          )

          setCurrentDraftId(draft.id)
          setDraftName(draft.name)

          if (draft.data?.positions && Array.isArray(draft.data.positions)) {
            setPositions(draft.data.positions)
            message.success(`–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫: ${draft.name}`)
          }
        } else {
          console.log('No drafts found for project, starting fresh')
          setPositions([])
        }
      } catch (error) {
        console.error('Error in loadLastDraft:', error)
      }
    }

    loadLastDraft()
  }, [selectedProject, isNewEstimate])

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ rates —á–µ—Ä–µ–∑ Supabase Realtime
  useEffect(() => {
    console.log('Setting up realtime subscription for rates table')

    const channel = supabase
      .channel('rates_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'rates',
        },
        payload => {
          console.log('Rate change detected:', payload)

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
          refetchRates()
          refetchRateMaterials()

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–∞—Å—Ü–µ–Ω–∫–µ
          if (payload.eventType === 'INSERT') {
            message.info('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞—Å—Ü–µ–Ω–∫–∞ –≤ —Å–±–æ—Ä–Ω–∏–∫')

            // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º" –∏ –ù–ï —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–º–µ—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Ü–µ–Ω–∫—É
            if (activeTab === 'table' && payload.new && !isNewEstimate) {
              console.log('Auto-importing new rate to table mode')
              // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
              window.setTimeout(() => {
                handleAutoImportNewRate(payload.new as any)
              }, 500)
            }
          }
        }
      )
      .subscribe()

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ rate_materials_mapping
    const materialsChannel = supabase
      .channel('rate_materials_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'rate_materials_mapping',
        },
        payload => {
          console.log('Rate materials change detected:', payload)
          refetchRateMaterials()
        }
      )
      .subscribe()

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ materials
    const materialsTableChannel = supabase
      .channel('materials_table_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'materials',
        },
        payload => {
          console.log('Materials table change detected:', payload)

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
          if (payload.eventType === 'INSERT') {
            message.info('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å–±–æ—Ä–Ω–∏–∫')

            // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º" –∏ –ù–ï —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–º–µ—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            if (activeTab === 'table' && payload.new && !isNewEstimate) {
              console.log('Auto-importing new material to table mode')
              // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
              window.setTimeout(() => {
                handleAutoImportNewMaterial(payload.new as any)
              }, 500)
            }
          }
        }
      )
      .subscribe()

    return () => {
      console.log('Cleaning up realtime subscriptions')
      supabase.removeChannel(channel)
      supabase.removeChannel(materialsChannel)
      supabase.removeChannel(materialsTableChannel)
    }
  }, [
    activeTab,
    handleAutoImportNewRate,
    handleAutoImportNewMaterial,
    message,
    refetchRates,
    refetchRateMaterials,
  ]) // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã

  // –ü–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
  const [positions, setPositions] = useState<EstimatePosition[]>([])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ "–ó–∞–∫–∞–∑—á–∏–∫" –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—á–µ—Ä–Ω–∏—Ö
  const calculateContractorValues = (
    position: EstimatePosition
  ): EstimatePosition => {
    if (
      position.justification === '–ø–æ–¥—Ä—è–¥—á–∏–∫' &&
      position.children &&
      position.children.length > 0
    ) {
      const workChild = position.children.find(
        child => child.justification === '—Ä–∞–±'
      )
      const contractorVolume = position.volume || 0

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–º —Ä–∞–±–æ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—ä–µ–º–æ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
      const updatedWorkChild = workChild
        ? {
            ...workChild,
            volume: contractorVolume,
            total: (workChild.workPrice || 0) * contractorVolume,
          }
        : undefined

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –∏ –æ–±—ä–µ–º–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
      const updatedMaterialChildren = position.children
        .filter(child => child.justification === '–º–∞—Ç')
        .map(material => {
          const norm = material.materialNorm || 1
          const calculatedVolume = contractorVolume * norm
          const price = material.materialPrice || 0
          const delivery = material.deliveryPrice || 0

          return {
            ...material,
            volume: calculatedVolume,
            total: calculatedVolume * (price + delivery),
          }
        })

      // –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π
      const updatedChildren = [
        ...(updatedWorkChild ? [updatedWorkChild] : []),
        ...updatedMaterialChildren,
      ]

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç
      const workTotal = updatedWorkChild
        ? (updatedWorkChild.workPrice || 0) * contractorVolume
        : 0

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      const materialsTotal = updatedMaterialChildren.reduce((sum, material) => {
        return sum + (material.total || 0)
      }, 0)

      return {
        ...position,
        volume: contractorVolume,
        workPrice: workTotal, // –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç = —Å—Ç–æ–∏–º–æ—Å—Ç—å "—Ä–∞–±"
        materialPrice: materialsTotal, // –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ = —Å—É–º–º–∞ –≤—Å–µ—Ö "–º–∞—Ç"
        total: workTotal + materialsTotal, // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        children: updatedChildren,
      }
    }
    return position
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å–º–µ—Ç—ã
  const handlePositionUpdate = useCallback(
    (id: string, updates: Partial<EstimatePosition>) => {
      const updatePositionRecursive = (
        positions: EstimatePosition[]
      ): EstimatePosition[] => {
        return positions.map(position => {
          if (position.id === id) {
            // –ü–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é
            const updatedPosition = { ...position, ...updates, isEdited: true }

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∑–∏—Ü–∏—è "–ø–æ–¥—Ä—è–¥—á–∏–∫" –∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –æ–±—ä–µ–º - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ
            if (
              updatedPosition.justification === '–ø–æ–¥—Ä—è–¥—á–∏–∫' &&
              updates.volume !== undefined
            ) {
              console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:', {
                id,
                oldVolume: position.volume,
                newVolume: updates.volume,
              })
              return calculateContractorValues(updatedPosition)
            }

            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç total
            if (
              updates.volume !== undefined ||
              updates.workPrice !== undefined ||
              updates.materialPrice !== undefined ||
              updates.deliveryPrice !== undefined
            ) {
              const volume = updatedPosition.volume || 0
              const workPrice = updatedPosition.workPrice || 0
              const materialPrice = updatedPosition.materialPrice || 0
              const deliveryPrice = updatedPosition.deliveryPrice || 0

              // –î–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: total = volume * (materialPrice + deliveryPrice)
              if (updatedPosition.justification === '–º–∞—Ç') {
                updatedPosition.total = volume * (materialPrice + deliveryPrice)
              }
              // –î–ª—è —Ä–∞–±–æ—Ç: total = volume * workPrice
              else if (updatedPosition.justification === '—Ä–∞–±') {
                updatedPosition.total = volume * workPrice
              }
              // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö: total = volume * workPrice
              else {
                updatedPosition.total = volume * workPrice
              }
            }

            return updatedPosition
          }
          if (position.children) {
            const updatedChildren = updatePositionRecursive(position.children)
            const positionWithUpdatedChildren = {
              ...position,
              children: updatedChildren,
            }
            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è "–ó–∞–∫–∞–∑—á–∏–∫", –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –µ—ë –∑–Ω–∞—á–µ–Ω–∏—è
            if (positionWithUpdatedChildren.justification === '–ø–æ–¥—Ä—è–¥—á–∏–∫') {
              return calculateContractorValues(positionWithUpdatedChildren)
            }
            return positionWithUpdatedChildren
          }
          return position
        })
      }

      setPositions(updatePositionRecursive(positions))

      // –û—Ç–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      setModifiedPositions(prev => {
        const newSet = new Set(prev)
        newSet.add(id)
        return newSet
      })
    },
    [positions, modifiedPositions.size]
  )

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const handlePositionAddClick = (parentId?: string) => {
    // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É "–ó–∞–∫–∞–∑—á–∏–∫", —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    if (parentId) {
      const findPosition = (
        positions: EstimatePosition[],
        id: string
      ): EstimatePosition | null => {
        for (const pos of positions) {
          if (pos.id === id) return pos
          if (pos.children) {
            const found = findPosition(pos.children, id)
            if (found) return found
          }
        }
        return null
      }

      const parentPosition = findPosition(positions, parentId)

      if (parentPosition?.justification === '–ø–æ–¥—Ä—è–¥—á–∏–∫') {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        handlePositionAdd(parentId, 1)
        return
      }
    }

    // –ò–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setPendingParentId(parentId)
    setAddPositionModalVisible(true)
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const handleConfirmAddPosition = () => {
    setAddPositionModalVisible(false)

    if (addMode === 'rate' && selectedRateId) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞ —Ä–∞—Å—Ü–µ–Ω–æ–∫
      handleAddFromRate(selectedRateId, pendingParentId)
    } else {
      // –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
      handlePositionAdd(pendingParentId, materialsCount)
    }

    setPendingParentId(undefined)
    setSelectedRateId(null)
    setRateSearchTerm('')
  }

  const handleAddFromRate = (rateId: string, parentId?: string) => {
    const selectedRate = rates.find(r => r.id === rateId)
    if (!selectedRate) return

    console.log('üîß Adding rate from collection:', {
      rateId,
      rateName: selectedRate.name,
      allRateMaterialsKeys: Object.keys(allRateMaterials),
      materialsForThisRate: allRateMaterials[rateId],
      materialsCount: allRateMaterials[rateId]?.length || 0,
    })

    const timestamp = Date.now()
    const baseNumber = parentId ? `${parentId}.` : ''
    const nextNumber = parentId
      ? `${baseNumber}${positions.filter(p => p.parentId === parentId).length + 1}`
      : `${positions.length + 1}`

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞
    const rateUnit =
      typeof selectedRate.unit === 'string'
        ? selectedRate.unit
        : selectedRate.unit?.short_name || '–∫–æ–º–ø–ª'

    const contractorPosition: EstimatePosition = {
      id: `rate-contractor-${timestamp}`,
      number: nextNumber,
      parentId,
      justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫',
      workName: selectedRate.name,
      unit: rateUnit,
      volume: 1,
      workPrice: 0,
      total: 0,
      level: parentId ? 1 : 0,
      expanded: true,
      created_at: new Date().toISOString(),
      children: [],
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–∞–±–æ—Ç
    const workPosition: EstimatePosition = {
      id: `rate-work-${timestamp}`,
      number: `${nextNumber}.1`,
      parentId: contractorPosition.id,
      justification: '—Ä–∞–±',
      workName: selectedRate.name,
      unit: rateUnit,
      volume: 1,
      workPrice: selectedRate.unit_price || 0,
      total: selectedRate.unit_price || 0,
      level: (parentId ? 1 : 0) + 1,
      created_at: new Date().toISOString(),
    }

    contractorPosition.children = [workPosition]
    contractorPosition.total = workPosition.total

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const rateMaterials = allRateMaterials[rateId] || []
    console.log('üì¶ Adding materials to position:', {
      rateMaterials,
      count: rateMaterials.length,
    })
    rateMaterials.forEach((rm: any, index: number) => {
      const materialPosition: EstimatePosition = {
        id: `rate-material-${timestamp}-${index}`,
        number: `${nextNumber}.${index + 2}`,
        parentId: contractorPosition.id,
        justification: '–º–∞—Ç',
        materialType: rm.materials?.material_type_short_name || '–æ—Å–Ω–æ–≤',
        workName: rm.materials?.name || '–ú–∞—Ç–µ—Ä–∏–∞–ª',
        unit: rm.materials?.unit_short_name || '–µ–¥',
        volume: rm.consumption || 1,
        materialNorm: rm.consumption || 1,
        materialPrice: rm.materials?.last_purchase_price || 0,
        deliveryPrice: 0,
        total: (rm.consumption || 1) * (rm.materials?.last_purchase_price || 0),
        level: (parentId ? 1 : 0) + 1,
        created_at: new Date().toISOString(),
      }
      contractorPosition.children?.push(materialPosition)
      contractorPosition.total += materialPosition.total
    })

    if (parentId) {
      setPositions(prev => {
        const updateChildren = (
          items: EstimatePosition[]
        ): EstimatePosition[] => {
          return items.map(item => {
            if (item.id === parentId) {
              return {
                ...item,
                children: [...(item.children || []), contractorPosition],
              }
            }
            if (item.children) {
              return { ...item, children: updateChildren(item.children) }
            }
            return item
          })
        }
        return updateChildren(prev)
      })
    } else {
      setPositions(prev => [...prev, contractorPosition])
    }

    // –û—Ç–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    setModifiedPositions(prev => {
      const newSet = new Set(prev)
      newSet.add(contractorPosition.id)
      return newSet
    })

    message.success(
      `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞ "${selectedRate.name}" —Å ${rateMaterials.length} –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏`
    )
  }

  const handlePositionAdd = (
    parentId?: string,
    initialMaterialsCount: number = 5
  ) => {
    const timestamp = Date.now()

    // –ï—Å–ª–∏ parentId —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (parentId) {
      // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é
      const findPosition = (
        positions: EstimatePosition[],
        id: string
      ): EstimatePosition | null => {
        for (const pos of positions) {
          if (pos.id === id) return pos
          if (pos.children) {
            const found = findPosition(pos.children, id)
            if (found) return found
          }
        }
        return null
      }

      const parentPosition = findPosition(positions, parentId)

      // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å - "–ó–∞–∫–∞–∑—á–∏–∫", –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
      if (parentPosition?.justification === '–ø–æ–¥—Ä—è–¥—á–∏–∫') {
        const childrenCount = parentPosition.children?.length || 0
        const materialId = `new-${timestamp}-material-${childrenCount}`

        const newMaterial: EstimatePosition = {
          id: materialId,
          number: `${parentPosition.number}.${childrenCount + 1}`,
          parentId: parentPosition.id,
          justification: '–º–∞—Ç',
          workName: `–ú–∞—Ç–µ—Ä–∏–∞–ª ${childrenCount}`,
          unit: '—à—Ç',
          volume: 1,
          workPrice: 0,
          total: 0,
          level: parentPosition.level + 1,
          created_at: new Date().toISOString(),
          isEdited: true,
        }

        const addMaterialToParent = (
          positions: EstimatePosition[]
        ): EstimatePosition[] => {
          return positions.map(position => {
            if (position.id === parentId) {
              const children = position.children || []
              const updatedPosition = {
                ...position,
                children: [...children, newMaterial],
                expanded: true,
              }
              // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
              return calculateContractorValues(updatedPosition)
            }
            if (position.children) {
              return {
                ...position,
                children: addMaterialToParent(position.children),
              }
            }
            return position
          })
        }

        setPositions(addMaterialToParent(positions))

        setModifiedPositions(prev => {
          const newSet = new Set(prev)
          newSet.add(materialId)
          return newSet
        })

        window.setTimeout(() => {
          setEditingCell({ id: materialId, field: 'workName' })
        }, 100)

        message.success('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª')
        console.log('Material added:', newMaterial)
        return
      }
    }

    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É: –ó–∞–∫–∞–∑—á–∏–∫ + –†–∞–±–æ—Ç—ã + N –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const baseNumber = parentId
      ? `${parentId}.${timestamp}`
      : `${positions.length + 1}`
    const INITIAL_MATERIALS_COUNT = initialMaterialsCount // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

    // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
    const contractorId = `new-${timestamp}-contractor`
    const workId = `new-${timestamp}-work`

    // 1. –ü–æ–∑–∏—Ü–∏—è "–ó–∞–∫–∞–∑—á–∏–∫" - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è
    const contractorPosition: EstimatePosition = {
      id: contractorId,
      number: baseNumber,
      parentId,
      justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫',
      workName: '–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è',
      unit: '—à—Ç',
      volume: 0, // –ë—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –æ–±—ä–µ–º—É "—Ä–∞–±"
      workPrice: 0, // –ë—É–¥–µ—Ç —Ä–∞–≤–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ "—Ä–∞–±"
      materialPrice: 0, // –ë—É–¥–µ—Ç —Ä–∞–≤–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ "–º–∞—Ç"
      total: 0,
      level: parentId ? 1 : 0,
      created_at: new Date().toISOString(),
      isEdited: true,
      expanded: true,
      children: [],
    }

    // 2. –ü–æ–∑–∏—Ü–∏—è "–†–∞–±–æ—Ç—ã" - –¥–æ—á–µ—Ä–Ω—è—è
    const workPosition: EstimatePosition = {
      id: workId,
      number: `${baseNumber}.1`,
      parentId: contractorId,
      justification: '—Ä–∞–±',
      workName: '–†–∞–±–æ—Ç—ã',
      unit: '—à—Ç',
      volume: 1,
      workPrice: 0,
      total: 0,
      level: (parentId ? 1 : 0) + 1,
      created_at: new Date().toISOString(),
      isEdited: true,
    }

    // 3. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
    const materialPositions: EstimatePosition[] = []
    const materialIds: string[] = []

    for (let i = 0; i < INITIAL_MATERIALS_COUNT; i++) {
      const materialId = `new-${timestamp}-material-${i}`
      materialIds.push(materialId)

      materialPositions.push({
        id: materialId,
        number: `${baseNumber}.${i + 2}`,
        parentId: contractorId,
        justification: '–º–∞—Ç',
        workName: `–ú–∞—Ç–µ—Ä–∏–∞–ª ${i + 1}`,
        unit: '—à—Ç',
        volume: 1,
        workPrice: 0,
        total: 0,
        level: (parentId ? 1 : 0) + 1,
        created_at: new Date().toISOString(),
        isEdited: true,
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
    contractorPosition.children = [workPosition, ...materialPositions]

    if (parentId) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
      const addToParent = (
        positions: EstimatePosition[]
      ): EstimatePosition[] => {
        return positions.map(position => {
          if (position.id === parentId) {
            const children = position.children || []
            return {
              ...position,
              children: [...children, contractorPosition],
              expanded: true,
            }
          }
          if (position.children) {
            return {
              ...position,
              children: addToParent(position.children),
            }
          }
          return position
        })
      }
      setPositions(addToParent(positions))
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
      setPositions([...positions, contractorPosition])
    }

    // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
    setModifiedPositions(prev => {
      const newSet = new Set(prev)
      newSet.add(contractorId)
      newSet.add(workId)
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      materialIds.forEach(id => newSet.add(id))
      return newSet
    })

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ "–ó–∞–∫–∞–∑—á–∏–∫"
    window.setTimeout(() => {
      setEditingCell({ id: contractorId, field: 'workName' })
    }, 100)

    message.success(
      `–î–æ–±–∞–≤–ª–µ–Ω–æ ${2 + INITIAL_MATERIALS_COUNT} –ø–æ–∑–∏—Ü–∏–π: –ó–∞–∫–∞–∑—á–∏–∫, –†–∞–±–æ—Ç—ã, ${INITIAL_MATERIALS_COUNT} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`
    )
    console.log('Positions added:', {
      parentId,
      contractor: contractorPosition,
      work: workPosition,
      materials: materialPositions,
    })
  }

  const handlePositionDelete = useCallback(
    (id: string) => {
      console.log('üóëÔ∏è Deleting position:', id)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback —Ñ–æ—Ä–º—É setState –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setPositions(currentPositions => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const positionExists = findPositionById(currentPositions, id)
        if (!positionExists) {
          console.log('‚ö†Ô∏è Position not found, skipping deletion:', id)
          return currentPositions
        }

        const removeById = (items: EstimatePosition[]): EstimatePosition[] => {
          return items
            .filter(item => {
              if (item.id === id) {
                console.log('‚ùå REMOVING:', item.workName)
                return false
              }
              return true
            })
            .map(item => ({
              ...item,
              children: item.children ? removeById(item.children) : undefined,
            }))
        }

        const result = removeById(currentPositions)
        console.log('‚úÖ Positions after deletion:', result.length)
        return result
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      setSelectedPositions(current =>
        current.filter(selectedId => selectedId !== id)
      )

      // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setModifiedPositions(prev => {
        const newSet = new Set(prev)
        newSet.add(id) // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é
        return newSet
      })

      message.success('–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
    },
    [message]
  )

  // –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ API
  const handleServerImport = async (customUrl?: string) => {
    const urlToUse = customUrl || googleSheetsUrl

    if (!urlToUse.trim()) {
      message.warning('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets')
      return
    }

    setIsAnalyzingSheet(true)
    try {
      message.info('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...')

      console.log('API Request:', {
        endpoint: '/api/import/google-sheets',
        action: 'import',
        url: urlToUse,
        timestamp: new Date().toISOString(),
      })

      const response = await window.fetch(
        'http://localhost:3001/api/import/google-sheets',
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            url: urlToUse,
          }),
        }
      )

      const data = await response.json()

      console.log('API Response:', {
        success: data.success,
        stats: data.stats,
        demo: data.demo,
        positionsCount: data.positions?.length || 0,
        timestamp: new Date().toISOString(),
      })

      if (data.success && data.positions) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç EstimatePosition
        const importedPositions: EstimatePosition[] = data.positions.map(
          (pos: any, index: number) => ({
            id: `server-import-${Date.now()}-${index}`,
            number: pos.number || `${positions.length + index + 1}`,
            justification: pos.justification || '—Ä–∞–±',
            materialType: pos.materialType,
            workName: pos.workName || pos.name || '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è',
            unit: pos.unit || '—à—Ç',
            volume: pos.volume || pos.quantity || 1,
            workPrice: pos.workPrice || pos.price || 0,
            materialPrice: pos.materialPrice,
            deliveryPrice: pos.deliveryPrice,
            total: pos.total || pos.volume * pos.workPrice || 0,
            level: pos.level || 1,
            created_at: new Date().toISOString(),
          })
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        setPositions(prev => [...prev, ...importedPositions])

        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
        setModifiedPositions(prev => {
          const newSet = new Set(prev)
          importedPositions.forEach(pos => newSet.add(pos.id))
          return newSet
        })

        const demoText = data.demo ? ' (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)' : ''
        message.success(
          `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedPositions.length} –ø–æ–∑–∏—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞${demoText}`
        )
        console.log('Server import result:', data)

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        setGoogleSheetsModalVisible(false)
        setGoogleSheetsUrl('')
      } else {
        message.error(data.message || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞')
      }
    } catch (error) {
      console.error('Server import error:', error)
      message.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ${error}`)
    } finally {
      setIsAnalyzingSheet(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  const handleTestConnection = async () => {
    setIsTestingConnection(true)
    try {
      console.log('API Request:', {
        endpoint: '/api/import/test-connection',
        action: 'test',
        timestamp: new Date().toISOString(),
      })

      const response = await window.fetch(
        'http://localhost:3001/api/import/test-connection'
      )
      const data = await response.json()

      console.log('API Response:', {
        success: data.success,
        demo: data.demo,
        title: data.title,
        timestamp: new Date().toISOString(),
      })

      if (data.success) {
        const demoText = data.demo ? ' (–¥–µ–º–æ —Ä–µ–∂–∏–º)' : ''
        message.success(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ${demoText}: ${data.title}`)
      } else {
        message.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + data.error)
      }
    } catch (error) {
      console.error('Connection test error:', error)
      message.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error)
    } finally {
      setIsTestingConnection(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Google Sheets (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
  const handleGoogleSheetsImport = async () => {
    if (!googleSheetsUrl.trim()) {
      message.warning('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets')
      return
    }

    setIsAnalyzingSheet(true)

    try {
      console.log('üîó –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ Google Sheets:', googleSheetsUrl)

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL
      let spreadsheetId = ''
      let gid = '0'

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
      const sheetsIdMatch = googleSheetsUrl.match(
        /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/
      )
      const gidMatch = googleSheetsUrl.match(/[#&]gid=([0-9]+)/)

      if (!sheetsIdMatch) {
        throw new Error(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ Google Sheets. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç /spreadsheets/d/[ID]'
        )
      }

      spreadsheetId = sheetsIdMatch[1]
      if (gidMatch) {
        gid = gidMatch[1]
      }

      console.log('üìÑ Spreadsheet ID:', spreadsheetId)
      console.log('üìÑ Sheet GID:', gid)

      // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const urls = [
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ CORS)
        `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=csv&gid=${gid}`,
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—É–±–ª–∏—á–Ω—ã–π URL
        `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&gid=${gid}`,
        // –í–∞—Ä–∏–∞–Ω—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL
        `https://docs.google.com/spreadsheets/d/${spreadsheetId}/pub?gid=${gid}&single=true&output=csv`,
      ]

      message.info('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...')
      let csvContent = ''
      let lastError = null

      // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π URL –ø–æ –æ—á–µ—Ä–µ–¥–∏
      for (let i = 0; i < urls.length; i++) {
        const exportUrl = urls[i]
        console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: ${exportUrl}`)

        try {
          const response = await window.fetch(exportUrl, {
            method: 'GET',
            mode: 'cors',
            headers: {
              Accept: 'text/csv,text/plain,*/*',
            },
          })

          if (response.ok) {
            csvContent = await response.text()
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${i + 1}`)
            break
          } else {
            console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ—É–¥–∞—á–Ω–∞: ${response.status}`)
            lastError = new Error(
              `HTTP ${response.status}: ${response.statusText}`
            )
          }
        } catch (error) {
          console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –æ—à–∏–±–∫–∞:`, error)
          lastError = error
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
      if (!csvContent || csvContent.trim().length < 10) {
        throw (
          lastError ||
          new Error(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.'
          )
        )
      }

      console.log('‚úÖ CSV –∑–∞–≥—Ä—É–∂–µ–Ω:', csvContent.length, '—Å–∏–º–≤–æ–ª–æ–≤')
      console.log('üìã –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', csvContent.substring(0, 200))

      // –ü–∞—Ä—Å–∏–º CSV
      const importedPositions = parseGoogleSheetsCSV(csvContent)

      if (importedPositions.length === 0) {
        throw new Error(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        )
      }

      console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π:', importedPositions.length)

      // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º
      setPositions(prev => [...prev, ...importedPositions])

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
      setModifiedPositions(prev => {
        const newSet = new Set(prev)
        importedPositions.forEach(pos => newSet.add(pos.id))
        return newSet
      })

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
      setGoogleSheetsModalVisible(false)
      setGoogleSheetsUrl('')

      message.success(
        `üéâ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedPositions.length} –ø–æ–∑–∏—Ü–∏–π –∏–∑ Google Sheets`
      )
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error)

      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞'
      if (error.message) {
        errorMessage = error.message
      } else if (typeof error === 'string') {
        errorMessage = error
      }

      message.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${errorMessage}`)
    } finally {
      setIsAnalyzingSheet(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã
  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç–µ
  const handleSaveChanges = async () => {
    if (!selectedProject) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞')
      return
    }

    if (positions.length === 0) {
      message.warning('–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
      return
    }

    setIsSavingChanges(true)
    console.log('Saving draft to database...')

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const draftData = {
        positions: positions,
        metadata: {
          positionsCount: positions.length,
          modifiedCount: modifiedPositions.size,
          lastModified: new Date().toISOString(),
        },
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
      const calculateTotal = (items: EstimatePosition[]): number => {
        return items.reduce((sum, item) => {
          const itemTotal = item.total || 0
          const childrenTotal = item.children
            ? calculateTotal(item.children)
            : 0
          return sum + (item.level === 0 ? itemTotal : 0)
        }, 0)
      }

      const totalAmount = calculateTotal(positions)

      if (currentDraftId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫
        const { error } = await supabase
          .from('estimate_drafts')
          .update({
            data: draftData,
            total_amount: totalAmount,
            updated_at: new Date().toISOString(),
          })
          .eq('id', currentDraftId)

        if (error) throw error

        message.success('–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
        console.log('Draft updated:', currentDraftId)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        const { data: draft, error } = await supabase
          .from('estimate_drafts')
          .insert({
            project_id: selectedProject,
            name:
              draftName ||
              `–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–º–µ—Ç—ã –æ—Ç ${new Date().toLocaleDateString()}`,
            data: draftData,
            total_amount: totalAmount,
            status: 'draft',
          })
          .select()
          .single()

        if (error) throw error

        setCurrentDraftId(draft.id)
        setDraftName(draft.name)
        message.success('–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
        console.log('Draft created:', draft.id)
      }

      setModifiedPositions(new Set())
    } catch (error) {
      console.error('Error saving draft:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞')
    } finally {
      setIsSavingChanges(false)
    }
  }

  const handleSaveEstimate = async () => {
    if (!selectedProject) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã')
      return
    }

    if (positions.length === 0) {
      message.warning('–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
      return
    }

    setIsSaving(true)
    console.log('Saving estimate to database...')

    try {
      const totalCost = positions.reduce(
        (sum, pos) => sum + (pos.total || 0),
        0
      )

      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ—Ç—É (–µ—Å—Ç—å estimateId –≤ URL)
      if (estimateId && currentDraftId === estimateId) {
        console.log('Updating existing estimate:', estimateId)

        const { data: estimate, error: estimateError } = await supabase
          .from('estimate_drafts')
          .update({
            data: {
              positions,
              totalCost,
              updatedAt: new Date().toISOString(),
            },
            updated_at: new Date().toISOString(),
          })
          .eq('id', estimateId)
          .select()
          .single()

        if (estimateError) {
          throw estimateError
        }

        console.log('Estimate updated successfully:', {
          id: estimate.id,
          name: estimate.name,
          totalCost,
          positionsCount: positions.length,
        })

        message.success(`–°–º–µ—Ç–∞ "${estimate.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ—Ç—É
        const estimateName = `–°–º–µ—Ç–∞ –æ—Ç ${new Date().toLocaleDateString('ru-RU')}`

        const { data: estimate, error: estimateError } = await supabase
          .from('estimate_drafts')
          .insert({
            project_id: selectedProject,
            name: estimateName,
            status: 'final', // –°—Ç–∞—Ç—É—Å "final" –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–º–µ—Ç—ã
            data: {
              positions,
              totalCost,
              createdAt: new Date().toISOString(),
            },
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          })
          .select()
          .single()

        if (estimateError) {
          throw estimateError
        }

        console.log('Estimate created successfully:', {
          id: estimate.id,
          name: estimateName,
          totalCost,
          positionsCount: positions.length,
        })

        message.success(`–°–º–µ—Ç–∞ "${estimateName}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`)

        // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã
        setCurrentDraftId(null)
        setDraftName('')
        setPositions([])
      }
    } catch (error) {
      console.error('Error saving estimate:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ—Ç—ã')
    } finally {
      setIsSaving(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞
  const handleImportFromRates = () => {
    console.log('Importing from rates collection...')

    if (ratesLoading || rateMaterialsLoading) {
      message.warning('–î–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...')
      return
    }

    if (!rates.length) {
      message.warning('–ù–µ—Ç —Ä–∞—Å—Ü–µ–Ω–æ–∫ –≤ —Å–±–æ—Ä–Ω–∏–∫–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
      return
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Ü–µ–Ω–∫–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã
    const newPositions: EstimatePosition[] = rates.map((rate, index) => {
      const materials = allRateMaterials[rate.id] || []

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (–≥—Ä—É–ø–ø—É)
      const contractorPosition: EstimatePosition = {
        id: `rate-${rate.id}`,
        number: `${positions.length + index + 1}`,
        justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫',
        workName: rate.name,
        unit: rate.unit_short_name || '–∫–æ–º–ø–ª',
        volume: 1,
        workPrice: 0,
        total: 0, // –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω
        level: 0,
        expanded: false,
        created_at: new Date().toISOString(),
        children: [],
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
      const workPosition: EstimatePosition = {
        id: `rate-work-${rate.id}`,
        number: `${positions.length + index + 1}.1`,
        parentId: contractorPosition.id,
        justification: '—Ä–∞–±',
        workName: rate.name,
        unit: rate.unit_short_name || '–µ–¥',
        volume: 1,
        workPrice: rate.base_price || 0,
        total: rate.base_price || 0,
        level: 1,
        created_at: new Date().toISOString(),
      }

      contractorPosition.children?.push(workPosition)
      let totalCost = rate.base_price || 0

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      materials.forEach((material, matIndex) => {
        const volume = material.consumption || 1
        const price = material.unit_price || 0
        const materialTotal = volume * price

        const materialPosition: EstimatePosition = {
          id: `rate-mat-${rate.id}-${matIndex}`,
          number: `${positions.length + index + 1}.${matIndex + 2}`,
          parentId: contractorPosition.id,
          justification: '–º–∞—Ç',
          materialType: materialTypes[0]?.short_name || '–æ—Å–Ω–æ–≤',
          workName: material.material?.name || '–ú–∞—Ç–µ—Ä–∏–∞–ª',
          unit: material.material?.unit_short_name || '–µ–¥',
          volume: volume,
          materialNorm: material.consumption || 1,
          workPrice: 0,
          materialPrice: price,
          deliveryPrice: 0,
          total: materialTotal,
          level: 1,
          created_at: new Date().toISOString(),
        }

        contractorPosition.children?.push(materialPosition)
        totalCost += materialTotal
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
      contractorPosition.total = totalCost

      return contractorPosition
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    setPositions([...positions, ...newPositions])

    // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
    setModifiedPositions(prev => {
      const newSet = new Set(prev)
      newPositions.forEach(pos => {
        newSet.add(pos.id)
        pos.children?.forEach(child => newSet.add(child.id))
      })
      return newSet
    })

    message.success(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${rates.length} —Ä–∞—Å—Ü–µ–Ω–æ–∫ –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞`)
    console.log('Imported rates:', newPositions)
  }

  // –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ CSV
  const handleImportCSV = () => {
    console.log('üì• Import CSV clicked - opening file dialog')
    fileInputRef.current?.click()
  }

  const handleExportCSV = () => {
    handleExport()
  }

  const findPositionById = (
    positions: EstimatePosition[],
    id: string
  ): EstimatePosition | null => {
    for (const position of positions) {
      if (position.id === id) {
        return position
      }
      if (position.children) {
        const found = findPositionById(position.children, id)
        if (found) return found
      }
    }
    return null
  }

  const handleToggleExpanded = useCallback(
    (id: string) => {
      const toggleExpanded = (
        positions: EstimatePosition[]
      ): EstimatePosition[] => {
        return positions.map(position => {
          if (position.id === id) {
            return { ...position, expanded: !position.expanded }
          }
          if (position.children) {
            return {
              ...position,
              children: toggleExpanded(position.children),
            }
          }
          return position
        })
      }

      setPositions(toggleExpanded(positions))
      console.log('Position expanded toggled:', { positionId: id })
    },
    [positions]
  )

  const fileInputRef = useRef<HTMLInputElement | null>(null)

  const handleImport = () => {
    console.log('üìÇ Import clicked - opening file dialog')
    fileInputRef.current?.click()
  }

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) {
      console.log('‚ùå No file selected')
      return
    }

    console.log('üìÑ File selected:', file.name, file.type, file.size, 'bytes')

    if (!file.name.toLowerCase().endsWith('.csv')) {
      message.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª')
      return
    }

    const reader = new window.FileReader()
    reader.onload = e => {
      try {
        const csvContent = e.target?.result as string
        console.log('üìã CSV content loaded, length:', csvContent.length)

        const importedPositions = parseCSVToPositions(csvContent)
        console.log('‚úÖ Parsed positions:', importedPositions.length)

        if (importedPositions.length > 0) {
          setPositions(importedPositions)
          setSelectedPositions([])

          // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
          setModifiedPositions(prev => {
            const newSet = new Set(prev)
            importedPositions.forEach(pos => {
              newSet.add(pos.id)
              pos.children?.forEach(child => newSet.add(child.id))
            })
            return newSet
          })

          message.success(
            `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedPositions.length} –ø–æ–∑–∏—Ü–∏–π –∏–∑ ${file.name}`
          )
          console.log('üéâ Import completed successfully')
        } else {
          message.warning('–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        }
      } catch (error) {
        console.error('‚ùå Import error:', error)
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞')
      }
    }

    reader.onerror = () => {
      console.error('‚ùå File reading error')
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞')
    }

    reader.readAsText(file, 'utf-8')

    // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
    event.target.value = ''
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV –∏–∑ Google Sheets (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const parseGoogleSheetsCSV = (csvContent: string): EstimatePosition[] => {
    const lines = csvContent.split('\n').filter(line => line.trim())
    console.log('üìä Google Sheets CSV full content preview:')
    console.log(csvContent.substring(0, 500) + '...')
    console.log('üìä Google Sheets CSV lines count:', lines.length)

    if (lines.length < 1) {
      console.log('‚ùå Not enough lines in Google Sheets CSV')
      return []
    }

    const positions: EstimatePosition[] = []

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    lines.forEach((line, i) => {
      const columns = parseCSVLine(line.trim())

      console.log(`üìù –°—Ç—Ä–æ–∫–∞ ${i + 1}:`, {
        rawLine: line.substring(0, 100),
        columns: columns,
        columnCount: columns.length,
      })

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (columns.length === 0 || columns.every(col => !col || !col.trim())) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ${i + 1}`)
        return
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const firstCol = columns[0]?.toLowerCase() || ''
      if (
        firstCol.includes('–Ω–æ–º–µ—Ä') ||
        firstCol.includes('‚Ññ') ||
        firstCol.includes('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
      ) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫—É ${i + 1}: ${firstCol}`)
        return
      }

      try {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        let workName = ''
        let unit = '—à—Ç'
        let volume = 1
        let price = 0
        let total = 0

        // –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é –∫–æ–ª–æ–Ω–∫—É –∫–∞–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        for (let j = 0; j < columns.length; j++) {
          const col = columns[j]?.trim()
          if (col && col.length > 2 && !col.match(/^\d+[.,]?\d*$/)) {
            workName = col
            console.log(`üìå –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ ${j}: "${workName}"`)
            break
          }
        }

        if (!workName) {
          console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`)
          return
        }

        // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const numbers = []
        for (let j = 0; j < columns.length; j++) {
          const col = columns[j]?.trim()
          if (col && col.match(/^\d+[.,]?\d*$/)) {
            const num = parseFloat(col.replace(',', '.'))
            if (!isNaN(num)) {
              numbers.push({ value: num, index: j })
            }
          }
        }

        console.log(`üî¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:`, numbers)

        // –ù–∞–∑–Ω–∞—á–∞–µ–º —á–∏—Å–ª–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É: –æ–±—ä–µ–º, —Ü–µ–Ω–∞, –∏—Ç–æ–≥–æ
        if (numbers.length >= 1) volume = numbers[0].value
        if (numbers.length >= 2) price = numbers[1].value
        if (numbers.length >= 3) total = numbers[2].value || volume * price

        // –ï—Å–ª–∏ –∏—Ç–æ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        if (total === 0 && volume > 0 && price > 0) {
          total = volume * price
        }

        // –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        const commonUnits = [
          '–º',
          '–º¬≤',
          '–º¬≥',
          '–º2',
          '–º3',
          '–∫–≥',
          '—Ç',
          '—à—Ç',
          '–ª',
          '–∫–æ–º–ø–ª',
          '–µ–¥',
        ]
        for (let j = 0; j < columns.length; j++) {
          const col = columns[j]?.trim()?.toLowerCase()
          if (col && commonUnits.includes(col)) {
            unit = col
            break
          }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏
        const workNameLower = workName.toLowerCase()
        let justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫' | '—Ä–∞–±' | '–º–∞—Ç' = '—Ä–∞–±'
        let materialType: '–æ—Å–Ω–æ–≤–∞' | '–≤—Å–ø–æ–º' | undefined = undefined

        if (
          workNameLower.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') ||
          workNameLower.includes('–±–µ—Ç–æ–Ω') ||
          workNameLower.includes('–∫–∏—Ä–ø–∏—á') ||
          workNameLower.includes('—Ü–µ–º–µ–Ω—Ç')
        ) {
          justification = '–º–∞—Ç'
          materialType = '–æ—Å–Ω–æ–≤–∞'
        } else if (
          workNameLower.includes('—Ä–∞–∑–¥–µ–ª') ||
          workNameLower.includes('–∏—Ç–æ–≥–æ')
        ) {
          justification = '–ø–æ–¥—Ä—è–¥—á–∏–∫'
        }

        const position: EstimatePosition = {
          id: `gs-${Date.now()}-${i}`,
          number: (i + 1).toString(),
          justification,
          materialType,
          workName,
          unit,
          volume,
          workPrice: price,
          total,
          level: justification === '–ø–æ–¥—Ä—è–¥—á–∏–∫' ? 0 : 1,
          created_at: new Date().toISOString(),
        }

        positions.push(position)

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è ${i + 1}:`, {
          workName: position.workName,
          justification: position.justification,
          unit: position.unit,
          volume: position.volume,
          price: position.workPrice,
          total: position.total,
        })
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`, error, line)
      }
    })

    console.log(`üìà –ò—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${positions.length}`)
    return positions
  }

  const parseCSVToPositions = (csvContent: string): EstimatePosition[] => {
    const lines = csvContent.split('\n').filter(line => line.trim())
    console.log('üìä CSV lines count:', lines.length)

    if (lines.length < 2) {
      console.log('‚ùå Not enough lines in CSV')
      return []
    }

    const positions: EstimatePosition[] = []

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É)
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim()
      if (!line) continue

      // –ü–∞—Ä—Å–∏–º CSV —Å—Ç—Ä–æ–∫—É (—É—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
      const columns = parseCSVLine(line)
      console.log(`üîç Line ${i}:`, columns)

      if (columns.length < 4) {
        console.log(`‚ö†Ô∏è Skipping line ${i} - not enough columns`)
        continue
      }

      try {
        const position: EstimatePosition = {
          id: `imported-${Date.now()}-${i}`,
          number: columns[0] || `${positions.length + 1}`,
          justification: getValidJustification(columns[1]),
          materialType: columns[2]
            ? (columns[2] as '–æ—Å–Ω–æ–≤–∞' | '–≤—Å–ø–æ–º')
            : undefined,
          workName: columns[3] || `–ü–æ–∑–∏—Ü–∏—è ${i}`,
          unit: columns[4] || '—à—Ç',
          volume: parseFloat(columns[5]) || 1,
          materialNorm: columns[6] ? parseFloat(columns[6]) : undefined,
          workPrice: parseFloat(columns[7]) || 0,
          materialPrice: columns[8] ? parseFloat(columns[8]) : undefined,
          deliveryPrice: columns[9] ? parseFloat(columns[9]) : undefined,
          total: parseFloat(columns[10]) || 0,
          level: 0,
          created_at: new Date().toISOString(),
        }

        // –ï—Å–ª–∏ total –Ω–µ —É–∫–∞–∑–∞–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (!position.total && position.volume && position.workPrice) {
          position.total = position.volume * position.workPrice
        }

        positions.push(position)
        console.log(`‚úÖ Added position:`, position.workName)
      } catch (error) {
        console.error(`‚ùå Error parsing line ${i}:`, error)
      }
    }

    return positions
  }

  const parseCSVLine = (line: string): string[] => {
    const result: string[] = []
    let current = ''
    let inQuotes = false

    for (let i = 0; i < line.length; i++) {
      const char = line[i]

      if (char === '"') {
        inQuotes = !inQuotes
      } else if (char === ',' && !inQuotes) {
        result.push(current.trim())
        current = ''
      } else {
        current += char
      }
    }

    result.push(current.trim())
    return result
  }

  const getValidJustification = (
    value: string
  ): '–ø–æ–¥—Ä—è–¥—á–∏–∫' | '—Ä–∞–±' | '–º–∞—Ç' => {
    const normalized = value?.toLowerCase().trim()
    if (normalized?.includes('–ø–æ–¥—Ä—è–¥—á–∏–∫') || normalized?.includes('–∑–∞–∫–∞–∑—á–∏–∫'))
      return '–ø–æ–¥—Ä—è–¥—á–∏–∫'
    if (normalized?.includes('—Ä–∞–±')) return '—Ä–∞–±'
    if (normalized?.includes('–º–∞—Ç')) return '–º–∞—Ç'
    return '—Ä–∞–±' // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  const handleExport = () => {
    console.log('üíæ Export clicked')

    if (positions.length === 0) {
      message.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
      return
    }

    try {
      const csvContent = generateCSVContent()
      const blob = new window.Blob([csvContent], {
        type: 'text/csv;charset=utf-8;',
      })
      const link = document.createElement('a')
      const url = URL.createObjectURL(blob)

      link.setAttribute('href', url)
      link.setAttribute(
        'download',
        `smeta_${new Date().toISOString().split('T')[0]}.csv`
      )
      link.style.visibility = 'hidden'

      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)

      message.success('–§–∞–π–ª CSV —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
      console.log('‚úÖ Export completed successfully')
    } catch (error) {
      console.error('‚ùå Export error:', error)
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞')
    }
  }

  const generateCSVContent = (): string => {
    const headers = [
      '‚Ññ –ø/–ø',
      '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ',
      '–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç',
      '–ï–¥. –∏–∑–º.',
      '–û–±—ä–µ–º',
      '–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç-–ª–æ–≤',
      '–¶–µ–Ω–∞ —Ä–∞–±–æ—Ç –∑–∞ –µ–¥.–∏–∑–º.',
      '–¶–µ–Ω–∞ –º–∞—Ç-–ª–æ–≤',
      '–ü–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      '–ò—Ç–æ–≥–æ',
    ]

    const rows: string[] = [headers.join(',')]

    const addPositionToCSV = (position: EstimatePosition) => {
      const row = [
        `"${position.number}"`,
        `"${position.justification}"`,
        `"${position.materialType || ''}"`,
        `"${position.workName}"`,
        `"${position.unit}"`,
        position.volume.toString(),
        (position.materialNorm || '').toString(),
        position.workPrice.toString(),
        (position.materialPrice || '').toString(),
        (position.deliveryPrice || '').toString(),
        position.total.toString(),
      ]
      rows.push(row.join(','))

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      if (position.children) {
        position.children.forEach(child => addPositionToCSV(child))
      }
    }

    positions.forEach(position => addPositionToCSV(position))

    console.log('üìù Generated CSV with', rows.length - 1, 'data rows')
    return rows.join('\n')
  }

  const handleDownloadSample = () => {
    console.log('üìã Download sample CSV clicked')

    const sampleCSV = `‚Ññ –ø/–ø,–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ,–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞,–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç,–ï–¥. –∏–∑–º.,–û–±—ä–µ–º,–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç-–ª–æ–≤,–¶–µ–Ω–∞ —Ä–∞–±–æ—Ç –∑–∞ –µ–¥.–∏–∑–º.,–¶–µ–Ω–∞ –º–∞—Ç-–ª–æ–≤,–ü–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤,–ò—Ç–æ–≥–æ
"1","–ø–æ–¥—Ä—è–¥—á–∏–∫","","–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã","–∫–æ–º–ø–ª",1,0,0,0,0,100000
"1.1","—Ä–∞–±","","–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–Ω—Ç–∞ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–º","–º¬≥",500,0,200,0,0,100000
"1.2","–º–∞—Ç","–æ—Å–Ω–æ–≤","–ü–µ—Å–æ–∫ –∫–∞—Ä—å–µ—Ä–Ω—ã–π","–º¬≥",50,1,0,800,50,42500
"2","–ø–æ–¥—Ä—è–¥—á–∏–∫","","–ë–µ—Ç–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã","–∫–æ–º–ø–ª",1,0,0,0,0,450000
"2.1","—Ä–∞–±","","–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞","–º¬≥",100,0,3500,0,0,350000
"2.2","–º–∞—Ç","–æ—Å–Ω–æ–≤","–ë–µ—Ç–æ–Ω B25","–º¬≥",100,1.05,0,5500,275,577500
"2.3","–º–∞—Ç","–≤—Å–ø–æ–º","–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–°","–∫–≥",2500,1,0,85,5,225000
"3","–ø–æ–¥—Ä—è–¥—á–∏–∫","","–ê—Ä–º–∞—Ç—É—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã","–∫–æ–º–ø–ª",1,,0,,,162500
"3.1","—Ä–∞–±","","–í—è–∑–∫–∞ –∞—Ä–º–∞—Ç—É—Ä—ã","–∫–≥",2500,,25,,,62500
"3.2","–º–∞—Ç","–æ—Å–Ω–æ–≤–∞","–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–° d12","–∫–≥",2500,1.02,0,65,3.25,100000`

    const blob = new window.Blob([sampleCSV], {
      type: 'text/csv;charset=utf-8;',
    })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)

    link.setAttribute('href', url)
    link.setAttribute('download', 'sample_smeta.csv')
    link.style.visibility = 'hidden'

    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)

    message.success('–ü—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ —Å–∫–∞—á–∞–Ω')
    console.log('‚úÖ Sample CSV downloaded')
  }

  const handleRestoreTestData = () => {
    const testData: EstimatePosition[] = [
      {
        id: '1',
        number: '1',
        justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫',
        workName: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        unit: '–∫–æ–º–ø–ª',
        volume: 1,
        workPrice: 0,
        total: 712500,
        level: 0,
        expanded: true,
        created_at: '2024-01-15T10:00:00Z',
        children: [
          {
            id: '1.1',
            number: '1.1',
            parentId: '1',
            justification: '—Ä–∞–±',
            workName: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
            unit: '–º¬≥',
            volume: 100,
            workPrice: 3500,
            total: 350000,
            level: 1,
            created_at: '2024-01-15T10:00:00Z',
          },
          {
            id: '1.2',
            number: '1.2',
            parentId: '1',
            justification: '–º–∞—Ç',
            materialType: materialTypes[0]?.short_name || '–æ—Å–Ω–æ–≤',
            workName: '–ë–µ—Ç–æ–Ω B25',
            unit: '–º¬≥',
            volume: 100,
            materialNorm: 1.05,
            workPrice: 5500,
            materialPrice: 5500,
            deliveryPrice: 275,
            total: 550000,
            level: 1,
            created_at: '2024-01-15T10:00:00Z',
          },
        ],
      },
      {
        id: '2',
        number: '2',
        justification: '–ø–æ–¥—Ä—è–¥—á–∏–∫',
        workName: '–ê—Ä–º–∞—Ç—É—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        unit: '–∫–æ–º–ø–ª',
        volume: 1,
        workPrice: 0,
        total: 162500,
        level: 0,
        expanded: false,
        created_at: '2024-01-16T14:30:00Z',
        children: [
          {
            id: '2.1',
            number: '2.1',
            parentId: '2',
            justification: '—Ä–∞–±',
            workName: '–í—è–∑–∫–∞ –∞—Ä–º–∞—Ç—É—Ä—ã',
            unit: '–∫–≥',
            volume: 2500,
            workPrice: 25,
            total: 62500,
            level: 1,
            created_at: '2024-01-16T14:30:00Z',
          },
          {
            id: '2.2',
            number: '2.2',
            parentId: '2',
            justification: '–º–∞—Ç',
            materialType: materialTypes[0]?.short_name || '–æ—Å–Ω–æ–≤',
            workName: '–ê—Ä–º–∞—Ç—É—Ä–∞ –ê500–° d12',
            unit: '–∫–≥',
            volume: 2500,
            materialNorm: 1.02,
            workPrice: 40,
            materialPrice: 65,
            deliveryPrice: 3.25,
            total: 100000,
            level: 1,
            created_at: '2024-01-16T14:30:00Z',
          },
        ],
      },
    ]

    setPositions(testData)
    setSelectedPositions([])
    message.success('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    console.log('üîÑ Test data restored')
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—ã–±–æ—Ä—ã –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ
  const validSelectedPositions = selectedPositions.filter(
    id => findPositionById(positions, id) !== null
  )

  if (validSelectedPositions.length !== selectedPositions.length) {
    console.log('üßπ Cleaning up invalid selections')
    setSelectedPositions(validSelectedPositions)
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
  const prevPositionsCount = useRef(positions.length)
  if (prevPositionsCount.current !== positions.length) {
    console.log('üìä TenderTest positions changed:', {
      from: prevPositionsCount.current,
      to: positions.length,
      timestamp: new Date().toISOString(),
    })
    prevPositionsCount.current = positions.length
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
  const tabItems: TabsProps['items'] = [
    {
      key: 'table',
      label: (
        <span>
          <TableOutlined />
          –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
        </span>
      ),
      children: (
        <div
          style={{
            height: 'calc(100vh - 200px)',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
          }}
        >
          {/* –í–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞–±–ª–∏—Ü—ã */}
          <div style={{ flexShrink: 0, paddingBottom: 16 }}>
            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ */}
            {!selectedProject && positions.length > 0 && (
              <Card
                size="small"
                style={{
                  marginBottom: 8,
                  backgroundColor: '#fff7e6',
                  borderColor: '#ffa940',
                }}
              >
                <div style={{ color: '#fa8c16', textAlign: 'center' }}>
                  ‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                </div>
              </Card>
            )}

            <Card size="small" style={{ marginBottom: 16 }}>
              <Row gutter={16} align="middle">
                <Col span={6}>
                  <Select
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç"
                    style={{ width: '100%' }}
                    allowClear
                    showSearch
                    value={selectedProject}
                    onChange={value => {
                      console.log('üìÇ Project changed to:', value)
                      setSelectedProject(value)
                      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–¥–µ—Å—å - –æ–Ω –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ useEffect
                      // setCurrentDraftId(null)
                      // setDraftName('')
                    }}
                    loading={projectsLoading}
                    filterOption={(input, option) => {
                      const text =
                        (option?.children || option?.label)?.toString() || ''
                      return text.toLowerCase().includes(input.toLowerCase())
                    }}
                  >
                    {projects.map(project => (
                      <Option key={project.id} value={project.id}>
                        {project.name} - {project.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                      </Option>
                    ))}
                  </Select>
                </Col>
                <Col span={6}>
                  <Input
                    placeholder="–ü–æ–∏—Å–∫..."
                    value={searchTerm}
                    onChange={e => setSearchTerm(e.target.value)}
                    allowClear
                  />
                </Col>
                <Col span={4}>
                  {selectedProject && drafts.length > 0 && (
                    <Select
                      placeholder="–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"
                      style={{ width: '100%' }}
                      allowClear
                      showSearch
                      value={currentDraftId}
                      onChange={async draftId => {
                        if (!draftId) {
                          setCurrentDraftId(null)
                          setDraftName('')
                          return
                        }

                        const draft = drafts.find(d => d.id === draftId)
                        if (draft && draft.data) {
                          const loadedPositions = draft.data.positions || []
                          // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ isEdited –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                          const cleanPositions = (
                            items: EstimatePosition[]
                          ): EstimatePosition[] => {
                            return items.map(item => ({
                              ...item,
                              isEdited: false,
                              children: item.children
                                ? cleanPositions(item.children)
                                : undefined,
                            }))
                          }
                          setPositions(cleanPositions(loadedPositions))
                          setCurrentDraftId(draft.id)
                          setDraftName(draft.name)
                          setModifiedPositions(new Set())
                          message.success('–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω')
                        }
                      }}
                      loading={draftsLoading}
                      filterOption={(input, option) => {
                        const text =
                          (option?.children || option?.label)?.toString() || ''
                        return text.toLowerCase().includes(input.toLowerCase())
                      }}
                    >
                      {drafts.map(draft => (
                        <Option key={draft.id} value={draft.id}>
                          {draft.name} (
                          {new Date(draft.updated_at).toLocaleDateString()})
                        </Option>
                      ))}
                    </Select>
                  )}
                </Col>
                <Col span={8}>
                  <Space
                    direction="vertical"
                    size="small"
                    style={{ width: '100%' }}
                  >
                    {/* –ì—Ä—É–ø–ø–∞ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –ò–º–ø–æ—Ä—Ç */}
                    <Space.Compact style={{ display: 'flex' }}>
                      <Button
                        type="primary"
                        icon={<PlusOutlined />}
                        onClick={() => handlePositionAddClick()}
                      >
                        –î–æ–±–∞–≤–∏—Ç—å
                      </Button>
                      <Button
                        icon={<DatabaseOutlined />}
                        onClick={handleImportFromRates}
                        loading={ratesLoading || rateMaterialsLoading}
                        style={{
                          backgroundColor: '#52c41a',
                          color: 'white',
                          borderColor: '#52c41a',
                        }}
                      >
                        –ò–∑ —Å–±–æ—Ä–Ω–∏–∫–∞
                      </Button>
                      <Button
                        icon={<GoogleOutlined />}
                        onClick={() => setGoogleSheetsModalVisible(true)}
                        style={{
                          backgroundColor: '#4285f4',
                          color: 'white',
                          borderColor: '#4285f4',
                        }}
                        title="–ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ"
                      >
                        Google Sheets
                      </Button>
                    </Space.Compact>

                    {/* –ì—Ä—É–ø–ø–∞ 2: –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ */}
                    <Space.Compact style={{ display: 'flex' }}>
                      <Button
                        icon={<UploadOutlined />}
                        onClick={handleImportCSV}
                      >
                        –ò–º–ø–æ—Ä—Ç CSV
                      </Button>
                      <Button
                        icon={<DownloadOutlined />}
                        onClick={handleExportCSV}
                      >
                        –≠–∫—Å–ø–æ—Ä—Ç
                      </Button>
                      <Button
                        type="primary"
                        icon={<SaveOutlined />}
                        onClick={handleSaveEstimate}
                        loading={isSaving}
                        disabled={!selectedProject || positions.length === 0}
                        title={
                          !selectedProject
                            ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
                            : positions.length === 0
                              ? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
                              : ''
                        }
                      >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                      </Button>
                      <Button
                        type={
                          modifiedPositions.size > 0 ? 'primary' : 'default'
                        }
                        icon={<SaveOutlined />}
                        onClick={handleSaveChanges}
                        loading={isSavingChanges}
                        disabled={!selectedProject || positions.length === 0}
                        danger={modifiedPositions.size > 0}
                        title={
                          !selectedProject
                            ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞'
                            : positions.length === 0
                              ? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
                              : ''
                        }
                        style={
                          modifiedPositions.size > 0
                            ? {
                                backgroundColor: '#ff4d4f',
                                borderColor: '#ff4d4f',
                                color: 'white',
                              }
                            : {}
                        }
                      >
                        {currentDraftId
                          ? `–ß–µ—Ä–Ω–æ–≤–∏–∫${modifiedPositions.size > 0 ? ` (${modifiedPositions.size})` : ''}`
                          : `–ß–µ—Ä–Ω–æ–≤–∏–∫${modifiedPositions.size > 0 ? ` (${modifiedPositions.size})` : ''}`}
                      </Button>
                    </Space.Compact>
                  </Space>
                </Col>
              </Row>
            </Card>
          </div>

          <div style={{ flex: 1, overflow: 'hidden', minHeight: 0 }}>
            <EstimateTable
              positions={positions}
              onPositionUpdate={handlePositionUpdate}
              onPositionAdd={handlePositionAddClick}
              onPositionDelete={handlePositionDelete}
              onToggleExpanded={handleToggleExpanded}
              selectedPositions={selectedPositions}
              onSelectionChange={setSelectedPositions}
              searchTerm={searchTerm}
              editingCell={editingCell}
              onEditingCellChange={setEditingCell}
            />
          </div>
        </div>
      ),
    },
  ]

  return (
    <div style={{ height: 'calc(100vh - 96px)', padding: '16px 0' }}>
      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ */}
      <input
        ref={fileInputRef}
        type="file"
        accept=".csv"
        style={{ display: 'none' }}
        onChange={handleFileSelect}
      />

      <Tabs
        activeKey={activeTab}
        onChange={setActiveTab}
        items={tabItems}
        size="large"
        style={{ height: '100%' }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é */}
      <Modal
        title={
          <div
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <span>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é</span>
            <Space size="small">
              <Button
                type={addMode === 'rate' ? 'primary' : 'default'}
                size="small"
                icon={<DatabaseOutlined />}
                onClick={() => {
                  setAddMode('rate')
                  setSelectedRateId(null)
                }}
              >
                –ò–∑ —Å–±–æ—Ä–Ω–∏–∫–∞
              </Button>
              <Button
                type={addMode === 'manual' ? 'primary' : 'default'}
                size="small"
                icon={<PlusOutlined />}
                onClick={() => setAddMode('manual')}
              >
                –í—Ä—É—á–Ω—É—é
              </Button>
            </Space>
          </div>
        }
        open={addPositionModalVisible}
        onOk={handleConfirmAddPosition}
        onCancel={() => {
          setAddPositionModalVisible(false)
          setPendingParentId(undefined)
          setSelectedRateId(null)
          setRateSearchTerm('')
          setAddMode('rate')
        }}
        okText={
          addMode === 'rate'
            ? selectedRateId
              ? '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫—É'
              : '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–µ–Ω–∫—É'
            : '–°–æ–∑–¥–∞—Ç—å'
        }
        okButtonProps={{ disabled: addMode === 'rate' && !selectedRateId }}
        cancelText="–û—Ç–º–µ–Ω–∞"
        width={addMode === 'rate' ? 900 : 600}
      >
        {addMode === 'rate' ? (
          <div>
            <div style={{ marginBottom: 16 }}>
              <RateAutocomplete
                rates={rates}
                onSelect={rate => {
                  setSelectedRateId(rate.id)
                  console.log('üìã –†–∞—Å—Ü–µ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞:', {
                    id: rate.id,
                    code: rate.code,
                    name: rate.name,
                    price: rate.base_price,
                    timestamp: new Date().toISOString(),
                  })
                }}
                placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é —Ä–∞—Å—Ü–µ–Ω–∫–∏..."
              />
              {rateMaterialsLoading && (
                <div
                  style={{
                    fontSize: 12,
                    color: '#1677ff',
                    textAlign: 'right',
                    marginTop: 8,
                  }}
                >
                  ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Ü–µ–Ω–æ–∫...
                </div>
              )}
            </div>

            <div
              style={{
                maxHeight: '500px',
                overflowY: 'auto',
                border: '1px solid #e8e8e8',
                borderRadius: 8,
                padding: 8,
              }}
            >
              {ratesLoading ? (
                <div
                  style={{
                    textAlign: 'center',
                    padding: '40px',
                    color: '#999',
                  }}
                >
                  –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—Ü–µ–Ω–æ–∫...
                </div>
              ) : rates.length === 0 ? (
                <div
                  style={{
                    textAlign: 'center',
                    padding: '40px',
                    color: '#999',
                  }}
                >
                  <DatabaseOutlined
                    style={{ fontSize: 48, marginBottom: 16 }}
                  />
                  <div>–°–±–æ—Ä–Ω–∏–∫ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –ø—É—Å—Ç</div>
                  <div style={{ fontSize: 12, marginTop: 8 }}>
                    –î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–†–∞—Å—Ü–µ–Ω–∫–∏"
                  </div>
                </div>
              ) : (
                rates
                  .filter(
                    rate =>
                      !rateSearchTerm ||
                      rate.code
                        ?.toLowerCase()
                        .includes(rateSearchTerm.toLowerCase()) ||
                      rate.name
                        .toLowerCase()
                        .includes(rateSearchTerm.toLowerCase())
                  )
                  .map(rate => {
                    const isSelected = selectedRateId === rate.id
                    const materials = allRateMaterials[rate.id] || []

                    return (
                      <Card
                        key={rate.id}
                        size="small"
                        style={{
                          marginBottom: 12,
                          cursor: 'pointer',
                          border: isSelected
                            ? '2px solid #1677ff'
                            : '1px solid #e8e8e8',
                          background: isSelected ? '#f0f7ff' : 'white',
                          transition: 'all 0.2s',
                        }}
                        onClick={() => setSelectedRateId(rate.id)}
                        hoverable
                      >
                        <div
                          style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'start',
                          }}
                        >
                          <div style={{ flex: 1 }}>
                            <div
                              style={{
                                fontWeight: 600,
                                color: '#1677ff',
                                marginBottom: 6,
                              }}
                            >
                              {rate.code || '–ë–µ–∑ –∫–æ–¥–∞'}
                            </div>
                            <div
                              style={{
                                color: '#333',
                                fontSize: 15,
                                fontWeight: 500,
                                marginBottom: 8,
                              }}
                            >
                              {rate.name}
                            </div>
                            <Space size="small" style={{ flexWrap: 'wrap' }}>
                              <span
                                style={{
                                  background: '#f0f0f0',
                                  padding: '2px 8px',
                                  borderRadius: 4,
                                  fontSize: 12,
                                  color: '#666',
                                }}
                              >
                                üìè{' '}
                                {typeof rate.unit === 'string'
                                  ? rate.unit
                                  : rate.unit?.short_name || '–µ–¥'}
                              </span>
                              {materials.length > 0 && (
                                <span
                                  style={{
                                    background: '#e6f7ff',
                                    padding: '2px 8px',
                                    borderRadius: 4,
                                    fontSize: 12,
                                    color: '#1677ff',
                                  }}
                                >
                                  üß± {materials.length}{' '}
                                  {materials.length === 1
                                    ? '–º–∞—Ç–µ—Ä–∏–∞–ª'
                                    : '–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'}
                                </span>
                              )}
                            </Space>
                          </div>
                          <div
                            style={{
                              textAlign: 'right',
                              fontWeight: 700,
                              color: '#1677ff',
                              fontSize: 20,
                            }}
                          >
                            {(rate.unit_price || 0).toLocaleString('ru-RU')} ‚ÇΩ
                          </div>
                        </div>
                      </Card>
                    )
                  })
              )}
            </div>

            {selectedRateId && (
              <div
                style={{
                  marginTop: 16,
                  padding: 12,
                  background: '#f0f7ff',
                  borderRadius: 8,
                  border: '1px solid #91d5ff',
                }}
              >
                <div style={{ color: '#1677ff', fontWeight: 600 }}>
                  ‚úì –í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞:{' '}
                  {rates.find(r => r.id === selectedRateId)?.name}
                </div>
                <div style={{ fontSize: 12, color: '#666', marginTop: 4 }}>
                  –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —Å —Ä–∞–±–æ—Ç–∞–º–∏
                  {allRateMaterials[selectedRateId]?.length > 0 &&
                    ` –∏ ${allRateMaterials[selectedRateId].length} –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏`}
                </div>

                {/* –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
                {allRateMaterials[selectedRateId]?.length > 0 && (
                  <div
                    style={{
                      marginTop: 12,
                      padding: 8,
                      background: 'white',
                      borderRadius: 6,
                    }}
                  >
                    <div
                      style={{
                        fontSize: 12,
                        fontWeight: 600,
                        marginBottom: 8,
                        color: '#666',
                      }}
                    >
                      –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ä–∞—Å—Ü–µ–Ω–∫–µ:
                    </div>
                    {allRateMaterials[selectedRateId].map(
                      (rm: any, index: number) => (
                        <div
                          key={index}
                          style={{
                            fontSize: 12,
                            padding: '4px 8px',
                            marginBottom: 4,
                            background: '#fafafa',
                            borderRadius: 4,
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                          }}
                        >
                          <div style={{ flex: 1 }}>
                            <span style={{ color: '#1677ff' }}>
                              {rm.materials?.name || '–ú–∞—Ç–µ—Ä–∏–∞–ª'}
                            </span>
                            <span style={{ color: '#999', marginLeft: 8 }}>
                              ({rm.materials?.unit_short_name || '–µ–¥'})
                            </span>
                          </div>
                          <div style={{ color: '#666' }}>
                            –†–∞—Å—Ö–æ–¥: {rm.consumption || 1}
                          </div>
                        </div>
                      )
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
        ) : (
          <Form layout="vertical">
            <Form.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤">
              <InputNumber
                min={0}
                max={20}
                value={materialsCount}
                onChange={value => setMaterialsCount(value || 0)}
                style={{ width: '100%' }}
                addonAfter="–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
              />
              <div style={{ marginTop: 8, color: '#666', fontSize: 12 }}>
                –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: 1 –ø–æ–∑–∏—Ü–∏—è "–ó–∞–∫–∞–∑—á–∏–∫", 1 –ø–æ–∑–∏—Ü–∏—è "–†–∞–±–æ—Ç—ã" –∏{' '}
                {materialsCount}{' '}
                {materialsCount === 1
                  ? '–º–∞—Ç–µ—Ä–∏–∞–ª'
                  : materialsCount > 1 && materialsCount < 5
                    ? '–º–∞—Ç–µ—Ä–∏–∞–ª–∞'
                    : '–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'}
              </div>
              <div style={{ marginTop: 4, color: '#999', fontSize: 12 }}>
                –í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
              </div>
            </Form.Item>
          </Form>
        )}
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Google Sheets */}
      <Modal
        title={
          <span>
            <GoogleOutlined style={{ marginRight: 8, color: '#4285f4' }} />
            –ò–º–ø–æ—Ä—Ç —Å–º–µ—Ç—ã –∏–∑ Google Sheets
          </span>
        }
        open={googleSheetsModalVisible}
        onCancel={() => {
          setGoogleSheetsModalVisible(false)
          setGoogleSheetsUrl('')
        }}
        width={800}
        footer={[
          <Button
            key="cancel"
            onClick={() => {
              setGoogleSheetsModalVisible(false)
              setGoogleSheetsUrl('')
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>,
          <Button
            key="import"
            type="primary"
            icon={<DownloadOutlined />}
            loading={isAnalyzingSheet}
            onClick={() => handleServerImport()}
            disabled={!googleSheetsUrl.trim()}
          >
            –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>,
        ]}
      >
        <Space direction="vertical" style={{ width: '100%' }} size="large">
          <div>
            <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É:</h4>
            <ol>
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ —Å–º–µ—Ç–æ–π</li>
              <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞</li>
              <li>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</li>
              <li>–ù–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"</li>
            </ol>
          </div>

          <Input
            size="large"
            placeholder="https://docs.google.com/spreadsheets/d/..."
            prefix={<LinkOutlined />}
            value={googleSheetsUrl}
            onChange={e => setGoogleSheetsUrl(e.target.value)}
          />

          <Card
            size="small"
            style={{ backgroundColor: '#f0f9ff', borderColor: '#0ea5e9' }}
          >
            <h4 style={{ color: '#0ea5e9' }}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞:</h4>
            <ol style={{ marginBottom: 8, fontSize: '12px' }}>
              <li>
                <strong>–û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets</strong>
              </li>
              <li>
                –ù–∞–∂–º–∏—Ç–µ <strong>"–§–∞–π–ª" ‚Üí "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"</strong>
              </li>
              <li>
                –í—ã–±–µ—Ä–∏—Ç–µ <strong>"–í–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç"</strong> –∏ —Ñ–æ—Ä–º–∞—Ç{' '}
                <strong>"–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞"</strong>
              </li>
              <li>
                –ù–∞–∂–º–∏—Ç–µ <strong>"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"</strong>
              </li>
              <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ</li>
            </ol>
          </Card>

          <Card size="small" style={{ backgroundColor: '#f5f5f5' }}>
            <h4>–ß—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</h4>
            <ul style={{ marginBottom: 0, fontSize: '12px' }}>
              <li>
                <strong>–í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞</strong> - –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–Ω–µ—Ç
                –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
              </li>
              <li>
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏
                (—Ä–∞–±–æ—Ç–∞/–º–∞—Ç–µ—Ä–∏–∞–ª/–ø–æ–¥—Ä—è–¥—á–∏–∫)
              </li>
              <li>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</li>
              <li>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è, –æ–±—ä–µ–º—ã –∏ —Ü–µ–Ω—ã</li>
              <li>–†–∞—Å—á–µ—Ç–Ω—ã–µ –∏—Ç–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏</li>
            </ul>
          </Card>

          <Card size="small" style={{ backgroundColor: '#e6f7ff' }}>
            <h4>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–º–µ—Ç:</h4>
            <ul style={{ marginBottom: 0 }}>
              <li>–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–º–µ—Ç—ã</li>
              <li>–û–±—ä–µ–∫—Ç–Ω—ã–µ —Å–º–µ—Ç—ã</li>
              <li>–°–≤–æ–¥–Ω—ã–µ —Å–º–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã</li>
              <li>–ê–∫—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (–ö–°-2, –ö–°-3)</li>
              <li>–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</li>
            </ul>
          </Card>

          {isAnalyzingSheet && (
            <Card size="small" style={{ backgroundColor: '#fff7e6' }}>
              <h4>–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞:</h4>
              <ol style={{ marginBottom: 0 }}>
                <li>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É...</li>
                <li>–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...</li>
                <li>–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</li>
                <li>–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞–ª–∞...</li>
              </ol>
            </Card>
          )}
        </Space>
      </Modal>
    </div>
  )
}
