import React, { useState, useEffect } from 'react'
import {
  Button,
  Space,
  Typography,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  message,
  Tag,
  Row,
  Col,
  Card,
  InputNumber,
  Tabs,
  List,
  Statistic,
  App,
  Popconfirm,
  DatePicker,
} from 'antd'
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  SearchOutlined,
  BuildOutlined,
  CalculatorOutlined,
  FileTextOutlined,
  DownloadOutlined,
  ExportOutlined,
  RightOutlined,
  DownOutlined,
} from '@ant-design/icons'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { ratesApi, RateUpdate, RateWithUnit, rateMaterialsApi, RateMaterial } from '@/entities/rates'
import { unitsApi, Unit } from '@/entities/units'
import { materialsApi, MaterialWithUnit } from '@/entities/materials'
import { supabase } from '@/lib/supabase'
import { RateGroup, RatePosition, RATE_COLORS } from '@/shared/types/estimate'
import AddRateModal from '@/widgets/estimate/AddRateModal'
import { usePortalLogger } from '@/shared/hooks/usePortalLogger'
import { generateRateCode } from '@/shared/utils/codeGenerator'

const { Title, Text } = Typography
const { Search } = Input


interface RateFormData {
  code: string
  name: string
  description?: string
  unit_id: string
  base_price: number
  category: string
  subcategory?: string
  is_active: boolean
}

interface MaterialFormData {
  code: string
  name: string
  description?: string
  category: string
  unit_id: string
  last_purchase_price?: number
  supplier?: string
  supplier_article?: string
  is_active: boolean
}


// Функция преобразования расценок из БД в формат RateGroup
const convertRatesToGroups = (
  rates: RateWithUnit[],
  allRateMaterials: Record<string, RateMaterial[]>
): RateGroup[] => {
  return rates.map(rate => {
    const rateId = rate.id

    // Создаем заказчика (основную позицию)
    const contractor: RatePosition = {
      id: `contractor-${rateId}`,
      type: 'Заказчик',
      name: rate.name,
      unit: rate.unit_short_name || 'ед',
      volume: 1,
      consumptionRate: 1,
      workPrice: rate.base_price,
      materialPrice: 0,
      deliveryPrice: 0,
      total: rate.base_price,
      groupId: rateId
    }

    // Создаем работы (одну позицию работ)
    const work: RatePosition = {
      id: `work-${rateId}`,
      type: 'раб',
      name: rate.name,
      unit: rate.unit_short_name || 'ед',
      volume: 1,
      consumptionRate: 1,
      workPrice: rate.base_price,
      materialPrice: 0,
      deliveryPrice: 0,
      total: rate.base_price,
      groupId: rateId
    }

    // Создаем материалы
    const rateMaterials = allRateMaterials[rateId] || []
    const materials: RatePosition[] = rateMaterials.map((rateMaterial, index) => {
      const volume = rateMaterial.consumption || 1
      const consumptionRate = rateMaterial.consumption || 1
      const materialPrice = rateMaterial.unit_price || 0
      const deliveryPrice = 0 // TODO: добавить поле доставки в БД

      // Правильная формула: объем * расход * стоимость + доставка
      const materialTotal = volume * consumptionRate * materialPrice + deliveryPrice

      return {
        id: `material-${rateId}-${index}`,
        type: 'мат',
        materialType: rateMaterial.material?.category === 'material' ? 'Основной' : 'Вспом',
        name: rateMaterial.material?.name || 'Материал',
        unit: rateMaterial.material?.unit_short_name || 'ед',
        volume: volume,
        consumptionRate: consumptionRate,
        workPrice: 0,
        materialPrice: materialPrice,
        deliveryPrice: deliveryPrice,
        total: materialTotal,
        groupId: rateId
      }
    })

    // Подсчет общей стоимости: работа + сумма всех материалов
    const worksCost = rate.base_price || 0
    const materialsCost = materials.reduce((sum, mat) => sum + mat.total, 0)
    const totalSum = worksCost + materialsCost

    // Обновляем total в contractor с учетом материалов
    contractor.total = totalSum
    contractor.materialPrice = materialsCost

    return {
      id: rateId,
      contractor,
      works: [work],
      materials,
      totalSum,
      isExpanded: false
    }
  })
}

const categoryOptions = [
  {
    value: 'общестроительные_работы',
    label: 'Общестроительные работы',
    color: 'blue',
  },
  { value: 'фасадные_работы', label: 'Фасадные работы', color: 'green' },
  { value: 'благоустройство', label: 'Благоустройство', color: 'orange' },
  { value: 'монолитные_работы', label: 'Монолитные работы', color: 'purple' },
  { value: 'оборудование', label: 'Оборудование', color: 'cyan' },
  { value: 'материал', label: 'Материал', color: 'red' },
  {
    value: 'электромонтажные_работы',
    label: 'Электромонтажные работы',
    color: 'gold',
  },
  { value: 'слаботочные_работы', label: 'Слаботочные работы', color: 'lime' },
  {
    value: 'механические_работы',
    label: 'Механические работы',
    color: 'magenta',
  },
  { value: 'земляные_работы', label: 'Земляные работы', color: 'volcano' },
  {
    value: 'временные_здания_сооружения',
    label: 'Временные здания/сооружения',
    color: 'geekblue',
  },
]

function Rates() {
  const { message } = App.useApp()
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isMaterialModalOpen, setIsMaterialModalOpen] = useState(false)
  const [isAddModalVisible, setIsAddModalVisible] = useState(false)
  const [editingRate, setEditingRate] = useState<RateWithUnit | null>(null)
  const [selectedRateForMaterial, setSelectedRateForMaterial] = useState<RateWithUnit | null>(null)
  const [form] = Form.useForm<RateFormData>()
  const [materialForm] = Form.useForm<MaterialFormData>()
  const [searchText, setSearchText] = useState('')
  const [categoryFilter, setCategoryFilter] = useState<string>()
  const [rateGroups, setRateGroups] = useState<RateGroup[]>([])
  const [exportingGroup, setExportingGroup] = useState<string | null>(null)

  const queryClient = useQueryClient()
  const logger = usePortalLogger()

  const { data: rates = [], isLoading, refetch: refetchRates } = useQuery({
    queryKey: ['rates'],
    queryFn: ratesApi.getAll,
  })

  const { data: units = [], isLoading: unitsLoading } = useQuery({
    queryKey: ['units'],
    queryFn: unitsApi.getAll,
  })

  const { data: materials = [], isLoading: materialsLoading } = useQuery({
    queryKey: ['materials'],
    queryFn: materialsApi.getAll,
  })

  // Запрос всех материалов расценок для построения иерархии (оптимизированный)
  const { data: rawRateMaterials = [], isLoading: rateMaterialsLoading, refetch: refetchRateMaterials } = useQuery({
    queryKey: ['rateMaterials', 'all'],
    queryFn: async () => {
      // Получаем все связи материалов с расценками за один запрос
      const { data, error } = await supabase
        .from('rate_materials_mapping')
        .select(`
          *,
          material:materials (
            id,
            code,
            name,
            description,
            unit_id,
            unit_name,
            unit_short_name,
            last_purchase_price,
            supplier,
            supplier_article,
            is_active
          )
        `)
        .order('created_at', { ascending: true })

      console.log('Optimized rate materials query:', {
        action: 'load_all_rate_materials_optimized',
        timestamp: new Date().toISOString(),
        success: !error,
        dataCount: data?.length || 0,
        error: error?.message,
      })

      if (error) {
        console.error('Get all rate materials error:', error)
        throw error
      }

      return data || []
    },
    enabled: true,
  })

  // Мемоизируем группировку материалов чтобы избежать бесконечных ререндеров
  const allRateMaterials = React.useMemo(() => {
    const grouped: Record<string, RateMaterial[]> = {}
    rawRateMaterials.forEach((rateMaterial) => {
      if (!grouped[rateMaterial.rate_id]) {
        grouped[rateMaterial.rate_id] = []
      }
      grouped[rateMaterial.rate_id].push(rateMaterial)
    })
    return grouped
  }, [rawRateMaterials])

  // Преобразуем данные из БД в формат RateGroup при изменении данных
  // Конвертация расценок в группы
  React.useEffect(() => {
    if (rates.length > 0 && !rateMaterialsLoading) {
      const groups = convertRatesToGroups(rates, allRateMaterials)
      setRateGroups(groups)
      console.log('Rate groups converted:', {
        ratesCount: rates.length,
        groupsCount: groups.length,
        materialsCount: Object.keys(allRateMaterials).length
      })
    }
  }, [rates, rawRateMaterials, rateMaterialsLoading])

  // Логирование загрузки страницы (только один раз при монтировании)
  React.useEffect(() => {
    if (rates.length > 0) {
      logger.logView('rates', undefined, `Загружена страница сборника расценок с ${rates.length} расценками`)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Проверка существования таблицы rate_materials_mapping
  React.useEffect(() => {
    const checkTable = async () => {
      try {
        const { data, error } = await supabase
          .from('rate_materials_mapping')
          .select('id')
          .limit(1)
        
        console.log('Table rate_materials_mapping check:', {
          exists: !error,
          error: error?.message,
          data: data
        })
        
        if (error) {
          console.error('⚠️  КРИТИЧЕСКАЯ ОШИБКА: Таблица rate_materials_mapping не существует!')
          console.error('Выполните SQL миграцию в Supabase Dashboard!')
        }
      } catch (err) {
        console.error('Database connection error:', err)
      }
    }
    
    checkTable()
  }, [])

  const createMutation = useMutation({
    mutationFn: ratesApi.create,
    onSuccess: async data => {
      console.log('✅ Rate created successfully:', data)
      console.log('🔵 tempRateMaterials at creation:', {
        length: tempRateMaterials.length,
        materials: tempRateMaterials,
        hasDataId: !!data.id
      })

      // Связываем материалы с новой расценкой в базе данных
      if (tempRateMaterials.length > 0 && data.id) {
        console.log('🔵 Will save materials because tempRateMaterials.length > 0 and data.id exists')
        try {
          const rateMaterialsToCreate = tempRateMaterials.map((material, index) => {
            const materialId = material.id.startsWith('catalog-')
              ? (material as any).originalId || material.id.replace('catalog-', '')
              : material.id

            console.log(`🔵 Обработка материала ${index + 1}/${tempRateMaterials.length}:`, {
              originalMaterial: {
                id: material.id,
                originalId: (material as any).originalId,
                code: material.code,
                name: material.name,
                consumption: material.consumption,
                price: material.last_purchase_price
              },
              extractedMaterialId: materialId
            })

            return {
              rate_id: data.id,
              material_id: materialId,
              consumption: material.consumption || 1,
              unit_price: material.last_purchase_price || 0,
              notes: `Материал добавлен при создании расценки`
            }
          })

          // Фильтруем дубликаты по material_id
          const uniqueMaterialIds = new Set<string>()
          const uniqueRateMaterials = rateMaterialsToCreate.filter(item => {
            if (uniqueMaterialIds.has(item.material_id)) {
              console.log('⚠️ Найден дубликат material_id, пропускаем:', {
                materialId: item.material_id,
                rateId: item.rate_id
              })
              return false
            }
            uniqueMaterialIds.add(item.material_id)
            return true
          })

          // Сохраняем материалы в базу данных
          console.log('🔵 Попытка сохранить материалы в БД:', {
            rateId: data.id,
            totalMaterials: rateMaterialsToCreate.length,
            uniqueMaterials: uniqueRateMaterials.length,
            duplicatesRemoved: rateMaterialsToCreate.length - uniqueRateMaterials.length,
            materials: uniqueRateMaterials
          })

          if (uniqueRateMaterials.length !== rateMaterialsToCreate.length) {
            message.warning(`Обнаружено и удалено ${rateMaterialsToCreate.length - uniqueRateMaterials.length} дубликатов материалов`)
          }

          const savedMaterials = await rateMaterialsApi.createMany(uniqueRateMaterials)

          console.log('✅ Материалы успешно сохранены в БД:', {
            rateId: data.id,
            materialsCount: uniqueRateMaterials.length,
            savedMaterials: savedMaterials
          })
          
          // Очищаем временные материалы
          setTempRateMaterials([])
          
          // Автоматически раскрываем новую расценку
          window.setTimeout(() => {
            setExpandedRates(prev => new Set([...prev, data.id]))
          }, 100)
          
        } catch (materialError) {
          console.error('❌ Error saving materials to database:', {
            error: materialError,
            message: materialError?.message,
            details: materialError?.details,
            hint: materialError?.hint,
            code: materialError?.code,
            rateId: data.id,
            materialsCount: tempRateMaterials.length
          })
          message.warning('Расценка создана, но возникла ошибка при сохранении материалов')
        }
      } else {
        console.log('⚠️  Skipping material save:', {
          reason: tempRateMaterials.length === 0 ? 'No materials to save' : 'Missing rate ID',
          tempRateMaterialsLength: tempRateMaterials.length,
          hasDataId: !!data.id
        })
      }

      // Обновляем кэш и перезагружаем данные
      await queryClient.invalidateQueries({ queryKey: ['rates'] })
      await queryClient.invalidateQueries({ queryKey: ['rateMaterials', 'all'] })

      console.log('✅ Cache invalidated, queries will reload')

      // Принудительно обновляем данные
      await refetchRates()
      await refetchRateMaterials()

      console.log('✅ Data refetched successfully')

      // Очищаем временные материалы
      setTempRateMaterials([])

      message.success('Расценка успешно создана')

      // Закрываем модальное окно только если оно открыто
      if (isModalOpen) {
        handleCloseModal()
      }
    },
    onError: error => {
      console.error('Create error details:', {
        error,
        message: error.message,
        timestamp: new Date().toISOString(),
      })
      message.error(`Ошибка при создании расценки: ${error.message}`)
    },
  })

  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: string; data: RateUpdate }) =>
      ratesApi.update(id, data),
    onSuccess: async (data, variables) => {
      console.log('Rate updated successfully:', data)
      
      // Обновляем материалы расценки
      if (tempRateMaterials.length > 0 && variables.id) {
        try {
          // Удаляем все старые материалы расценки
          await rateMaterialsApi.deleteByRateId(variables.id)
          console.log('Old materials deleted for rate:', variables.id)
          
          // Создаем новые материалы
          const rateMaterialsToCreate = tempRateMaterials.map(material => {
            const materialId = material.id.startsWith('catalog-')
              ? (material as any).originalId || material.id.replace('catalog-', '')
              : (material as any).originalId || material.id

            return {
              rate_id: variables.id,
              material_id: materialId,
              consumption: material.consumption || 1,
              unit_price: material.last_purchase_price || 0,
              notes: `Материал обновлен при редактировании расценки`
            }
          })

          // Фильтруем дубликаты по material_id
          const uniqueMaterialIds = new Set<string>()
          const uniqueRateMaterials = rateMaterialsToCreate.filter(item => {
            if (uniqueMaterialIds.has(item.material_id)) {
              console.log('⚠️ Найден дубликат material_id при обновлении, пропускаем:', {
                materialId: item.material_id,
                rateId: item.rate_id
              })
              return false
            }
            uniqueMaterialIds.add(item.material_id)
            return true
          })

          console.log('Обновление материалов расценки:', {
            rateId: variables.id,
            totalMaterials: rateMaterialsToCreate.length,
            uniqueMaterials: uniqueRateMaterials.length,
            duplicatesRemoved: rateMaterialsToCreate.length - uniqueRateMaterials.length,
            materials: uniqueRateMaterials
          })

          if (uniqueRateMaterials.length !== rateMaterialsToCreate.length) {
            message.warning(`Обнаружено и удалено ${rateMaterialsToCreate.length - uniqueRateMaterials.length} дубликатов материалов`)
          }

          await rateMaterialsApi.createMany(uniqueRateMaterials)
          console.log('✅ Материалы расценки успешно обновлены')
          
        } catch (materialError) {
          console.error('Error updating rate materials:', materialError)
          message.warning('Расценка обновлена, но возникла ошибка при сохранении материалов')
        }
      }
      
      // Обновляем кэш
      await queryClient.invalidateQueries({ queryKey: ['rates'] })
      await queryClient.invalidateQueries({ queryKey: ['rateMaterials', 'all'] })
      
      message.success('Расценка и материалы успешно обновлены')
      handleCloseModal()
    },
    onError: error => {
      console.error('Update error details:', {
        error,
        message: error.message,
        timestamp: new Date().toISOString(),
      })
      message.error(`Ошибка при обновлении расценки: ${error.message}`)
    },
  })

  const deleteMutation = useMutation({
    mutationFn: ratesApi.delete,
    onSuccess: () => {
      console.log('Rate deleted successfully')
      queryClient.invalidateQueries({ queryKey: ['rates'] })
      message.success('Расценка успешно удалена')
    },
    onError: error => {
      console.error('Delete error details:', {
        error,
        message: error.message,
        timestamp: new Date().toISOString(),
      })
      message.error(`Ошибка при удалении расценки: ${error.message}`)
    },
  })

  // Мутация для создания материалов (пока не используется)
  const createMaterialMutation = useMutation({
    mutationFn: materialsApi.create,
    onSuccess: data => {
      console.log('Material created successfully:', data)
      queryClient.invalidateQueries({ queryKey: ['materials'] })
      message.success('Материал успешно создан')
      handleCloseMaterialModal()
    },
    onError: error => {
      console.error('Create material error details:', {
        error,
        message: error.message,
        timestamp: new Date().toISOString(),
      })
      message.error(`Ошибка при создании материала: ${error.message}`)
    },
  })

  const handleAdd = () => {
    console.log('Add rate clicked', {
      action: 'add_rate',
      timestamp: new Date().toISOString(),
    })

    setEditingRate(null)
    form.resetFields()

    const defaultCategory = 'общестроительные_работы'
    // Генерируем код автоматически
    const existingCodes = rates.map(r => r.code)
    const generatedCode = generateRateCode(defaultCategory, existingCodes)

    form.setFieldsValue({
      is_active: true,
      category: defaultCategory,
      base_price: 0,
      code: generatedCode,
    })
    setTempRateMaterials([])
    setActiveTab('1')
    setIsModalOpen(true)
  }

  // Функции для работы с временными материалами в модалке
  const addTempMaterial = () => {
    // Используем первую доступную единицу измерения по умолчанию
    const defaultUnit = units[0]
    
    const newMaterial: MaterialWithUnit & { consumption?: number } = {
      id: `temp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      code: `МТ-${String(tempRateMaterials.length + 1).padStart(3, '0')}`,
      name: '',
      description: '',
      category: 'material',
      unit_id: defaultUnit?.id || '',
      unit_name: defaultUnit?.name || '',
      unit_short_name: defaultUnit?.short_name || '',
      last_purchase_price: 0,
      consumption: 1, // Добавляем поле расхода
      supplier: '',
      supplier_article: '',
      is_active: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    }
    setTempRateMaterials(prev => {
      const updated = [...prev, newMaterial]
      console.log('Material added to temp list:', { newMaterial, totalCount: updated.length })
      return updated
    })
  }

  const addMaterialFromCatalog = (selectedMaterialId: string) => {
    console.log('addMaterialFromCatalog called with ID:', selectedMaterialId)

    const selectedMaterial = materials.find(m => m.id === selectedMaterialId)
    if (!selectedMaterial) {
      console.error('Material not found:', selectedMaterialId)
      message.error('Материал не найден')
      return
    }

    // Проверяем, не добавлен ли уже этот материал (по originalId)
    const isAlreadyAdded = tempRateMaterials.some(m => {
      const existingMaterialId = m.id.startsWith('catalog-')
        ? ((m as any).originalId || m.id.replace('catalog-', ''))
        : (m.id.startsWith('temp-') ? null : m.id)

      return existingMaterialId === selectedMaterial.id
    })

    if (isAlreadyAdded) {
      console.log('❌ Попытка добавить дубликат материала:', {
        materialId: selectedMaterial.id,
        code: selectedMaterial.code,
        name: selectedMaterial.name,
        timestamp: new Date().toISOString()
      })
      message.warning(`Материал "${selectedMaterial.code} - ${selectedMaterial.name}" уже добавлен в расценку`)
      setSelectedCatalogMaterial(undefined) // Сбрасываем выбор
      return
    }

    console.log('✅ Добавление материала из справочника:', {
      materialId: selectedMaterial.id,
      code: selectedMaterial.code,
      name: selectedMaterial.name,
      timestamp: new Date().toISOString()
    })

    // Добавляем материал из справочника с меткой
    const materialFromCatalog: MaterialWithUnit & { consumption?: number; originalId?: string } = {
      ...selectedMaterial,
      id: `catalog-${selectedMaterial.id}`, // Метка что это материал из справочника
      originalId: selectedMaterial.id, // Сохраняем оригинальный ID
      consumption: 1, // По умолчанию 1 единица расхода
      // Сохраняем оригинальные единицы измерения из материала
      unit_id: selectedMaterial.unit_id,
      unit_name: selectedMaterial.unit_name,
      unit_short_name: selectedMaterial.unit_short_name,
    }

    setTempRateMaterials(prev => {
      const updated = [...prev, materialFromCatalog]
      console.log('Material from catalog added to temp list:', {
        materialFromCatalog,
        totalCount: updated.length,
        selectedMaterial: selectedMaterial.name
      })
      return updated
    })

    message.success(`Материал "${selectedMaterial.name}" добавлен`)
    setSelectedCatalogMaterial(undefined) // Сбрасываем выбор после добавления
  }

  const removeTempMaterial = (materialId: string) => {
    setTempRateMaterials(prev => prev.filter(m => m.id !== materialId))
  }

  const updateTempMaterial = (materialId: string, field: string, value: any) => {
    setTempRateMaterials(prev => prev.map(material => 
      material.id === materialId 
        ? { ...material, [field]: value, updated_at: new Date().toISOString() }
        : material
    ))
  }

  const handleEdit = async (rate: RateWithUnit) => {
    console.log('Edit rate clicked', {
      action: 'edit_rate',
      rateId: rate.id,
      rateName: rate.name,
      timestamp: new Date().toISOString(),
    })

    setEditingRate(rate)
    form.setFieldsValue(rate)
    
    // Загружаем существующие материалы расценки
    try {
      const rateMaterials = await rateMaterialsApi.getByRateId(rate.id)
      console.log('Loaded materials for editing rate:', {
        rateId: rate.id,
        materialsCount: rateMaterials.length,
        materials: rateMaterials
      })
      
      // Преобразуем материалы в формат для редактирования
      const tempMaterials = rateMaterials.map(rateMaterial => ({
        id: rateMaterial.material?.id || rateMaterial.material_id,
        code: rateMaterial.material?.code || '',
        name: rateMaterial.material?.name || '',
        description: rateMaterial.material?.description || '',
        category: 'material' as const,
        unit_id: rateMaterial.material?.unit_id || '', // Используем единицы из материала
        unit_name: rateMaterial.material?.unit_name || '',
        unit_short_name: rateMaterial.material?.unit_short_name || '',
        last_purchase_price: rateMaterial.unit_price,
        supplier: rateMaterial.material?.supplier || '',
        supplier_article: rateMaterial.material?.supplier_article || '',
        is_active: rateMaterial.material?.is_active ?? true,
        created_at: rateMaterial.created_at,
        updated_at: rateMaterial.updated_at,
        consumption: rateMaterial.consumption,
        originalId: rateMaterial.material?.id || rateMaterial.material_id,
        rateMaterialId: rateMaterial.id // Для обновления
      }))
      
      setTempRateMaterials(tempMaterials)
      setActiveTab('1') // Открываем на первой вкладке
      
    } catch (error) {
      console.error('Error loading materials for rate editing:', error)
      setTempRateMaterials([]) // Очищаем если ошибка
    }
    
    setIsModalOpen(true)
  }

  const handleDelete = (id: string) => {
    console.log('Delete rate clicked', {
      action: 'delete_rate',
      rateId: id,
      timestamp: new Date().toISOString(),
    })

    deleteMutation.mutate(id)
  }

  // Функции для работы с блоками расценок (новый интерфейс)
  const handleEditGroup = (groupId: string) => {
    console.log('handleEditGroup called with groupId:', groupId)
    const rate = rates.find(r => r.id === groupId)
    console.log('Found rate:', rate)

    if (rate) {
      // Логируем открытие формы редактирования
      logger.logButtonClick('Изменить расценку', 'Сборник расценок', {
        rateId: groupId,
        rateName: rate.name
      })
      console.log('Calling handleEdit with rate:', rate)
      handleEdit(rate)
    } else {
      console.error('Rate not found for groupId:', groupId)
      message.error('Расценка не найдена')
    }
  }

  const handleDeleteGroup = (groupId: string) => {
    const rate = rates.find(r => r.id === groupId)
    // Логируем удаление расценки
    logger.logButtonClick('Удалить расценку', 'Сборник расценок', {
      rateId: groupId,
      rateName: rate?.name || 'Неизвестно'
    })
    handleDelete(groupId)
  }

  const handleDuplicateGroup = (groupId: string) => {
    const rate = rates.find(r => r.id === groupId)
    if (rate) {
      // Логируем дублирование расценки
      logger.logButtonClick('Дублировать расценку', 'Сборник расценок', {
        originalRateId: groupId,
        originalRateName: rate.name
      })

      // Создаем дубликат расценки
      const duplicateData = {
        code: `${rate.code}-КОПИЯ`,
        name: `${rate.name} (копия)`,
        description: rate.description,
        unit_id: rate.unit_id,
        base_price: rate.base_price,
        category: rate.category,
        subcategory: rate.subcategory,
        is_active: rate.is_active
      }

      createMutation.mutate(duplicateData)
      message.success('Расценка дублирована')

      // Логируем создание новой расценки
      logger.logCreate('rates', 'new-duplicate', duplicateData, `Создана копия расценки "${rate.name}"`)
    }
  }

  const handleUpdateGroupPosition = async (positionId: string, updates: Partial<RatePosition>) => {
    console.log('Position update requested:', { positionId, updates })

    // Логируем действие пользователя
    logger.logButtonClick('Редактирование поля расценки', 'Сборник расценок', {
      positionId,
      updates,
      action: 'inline_edit'
    })

    // Найдем группу, которая содержит эту позицию
    const group = rateGroups.find(g =>
      g.contractor.id === positionId ||
      g.works.some(w => w.id === positionId) ||
      g.materials.some(m => m.id === positionId)
    )

    if (!group) {
      message.error('Группа расценок не найдена')
      return
    }

    const rate = rates.find(r => r.id === group.id)
    if (!rate) {
      message.error('Расценка в БД не найдена')
      return
    }

    try {
      // Если обновляется основная позиция (заказчик или работа), обновляем расценку в БД
      if (positionId === group.contractor.id || positionId === group.works[0]?.id) {
        const updateData: Partial<RateUpdate> = {}

        if (updates.name) {
          updateData.name = updates.name
        }
        if (updates.workPrice !== undefined) {
          updateData.base_price = updates.workPrice
        }
        if (updates.unit) {
          const unit = units.find(u => u.short_name === updates.unit)
          if (unit) {
            updateData.unit_id = unit.id
          }
        }

        // Обновляем в БД если есть изменения
        if (Object.keys(updateData).length > 0) {
          await updateMutation.mutateAsync({
            id: group.id,
            data: updateData
          })

          // Обновляем кэш данных
          await queryClient.invalidateQueries({ queryKey: ['rates'] })
          console.log('📊 Rate cache invalidated after update')
        }
      }

      // Если обновляется материал, обновляем таблицу rate_materials_mapping
      const materialIndex = group.materials.findIndex(m => m.id === positionId)
      if (materialIndex !== -1) {
        try {
          const rateMaterials = allRateMaterials[group.id] || []
          if (rateMaterials[materialIndex]) {
            const rateMaterialId = rateMaterials[materialIndex].id
            const updateData = {
              consumption: updates.consumptionRate || updates.volume,
              unit_price: updates.materialPrice,
              notes: `Обновлено через интерфейс: ${new Date().toLocaleString()}`
            }

            // Обновляем запись в rate_materials_mapping
            await rateMaterialsApi.update(rateMaterialId, updateData)
            console.log('📋 Material mapping updated:', { rateMaterialId, updateData })

            // Обновляем кэш материалов
            await queryClient.invalidateQueries({ queryKey: ['rateMaterials', 'all'] })
          }
        } catch (materialError) {
          console.error('Error updating material mapping:', materialError)
          // Не показываем ошибку пользователю, так как основное обновление прошло успешно
        }
      }

      // Обновляем локальное состояние групп
      setRateGroups(prev => prev.map(g => {
        if (g.id !== group.id) return g

        const updatedGroup = { ...g }

        // Обновляем заказчика
        if (positionId === g.contractor.id) {
          updatedGroup.contractor = { ...g.contractor, ...updates }
        }

        // Обновляем работы
        updatedGroup.works = g.works.map(work =>
          work.id === positionId ? { ...work, ...updates } : work
        )

        // Обновляем материалы
        updatedGroup.materials = g.materials.map(material =>
          material.id === positionId ? { ...material, ...updates } : material
        )

        // Пересчитываем общую стоимость
        const worksCost = updatedGroup.works.reduce((sum, w) => sum + (w.volume * w.workPrice), 0)
        const materialsCost = updatedGroup.materials.reduce((sum, m) => sum + (m.volume * m.materialPrice * m.consumptionRate), 0)
        updatedGroup.totalSum = worksCost + materialsCost

        // Обновляем total для каждой позиции
        updatedGroup.works = updatedGroup.works.map(w => ({
          ...w,
          total: w.volume * w.workPrice
        }))

        updatedGroup.materials = updatedGroup.materials.map(m => ({
          ...m,
          total: m.volume * m.materialPrice * m.consumptionRate + m.deliveryPrice
        }))

        updatedGroup.contractor = {
          ...updatedGroup.contractor,
          total: updatedGroup.totalSum
        }

        return updatedGroup
      }))

      message.success('Позиция обновлена')
      console.log('✅ Position updated successfully:', { positionId, updates })

      // Логируем успешное обновление в БД
      logger.logUpdate('rates', group.id, {}, updates, `Обновлена позиция ${positionId} в расценке "${group.contractor.name}"`)

    } catch (error) {
      console.error('Error updating position:', error)
      message.error(`Ошибка обновления: ${error}`)
    }
  }

  const handleAddNewGroup = () => {
    // Логируем открытие модального окна добавления
    logger.logButtonClick('Добавить расценку', 'Сборник расценок')
    setIsAddModalVisible(true)
    console.log('Add new group modal opened')
  }

  const handleSaveNewGroup = async (newGroup: RateGroup) => {
    console.log('New group saved:', newGroup)

    // Валидация данных
    if (!newGroup.contractor.name || !newGroup.works?.[0]) {
      message.error('Не хватает данных для создания расценки')
      return
    }

    // Конвертируем RateGroup обратно в формат БД и сохраняем
    const rateData = {
      code: newGroup.contractor.name.replace(/\s+/g, '-').toUpperCase(),
      name: newGroup.contractor.name,
      description: newGroup.works[0]?.name ? `Включает работы: ${newGroup.works[0].name}` : '',
      unit_id: units.find(u => u.short_name === newGroup.contractor.unit)?.id || units[0]?.id || '',
      base_price: newGroup.works[0]?.workPrice || newGroup.totalSum || 0,
      category: 'общестроительные_работы',
      is_active: true
    }

    console.log('handleSaveNewGroup: About to save rateData:', rateData)
    console.log('handleSaveNewGroup: Materials to save:', newGroup.materials)

    // Сохраняем материалы временно для последующей обработки в onSuccess
    if (newGroup.materials && newGroup.materials.length > 0) {
      // Подготавливаем материалы для сохранения
      const materialsToSave = newGroup.materials.map(material => ({
        id: `temp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        code: `MAT-${Date.now()}`,
        name: material.name || 'Новый материал',
        description: '',
        category: 'material',
        unit_id: units.find(u => u.short_name === material.unit)?.id || units[0]?.id || '',
        unit_name: units.find(u => u.short_name === material.unit)?.name || 'ед',
        unit_short_name: material.unit || 'ед',
        last_purchase_price: material.materialPrice || 0,
        consumption: material.consumptionRate || 1,
        supplier: '',
        supplier_article: '',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }))

      // Сохраняем материалы во временное состояние для createMutation.onSuccess
      setTempRateMaterials(materialsToSave)
    } else {
      setTempRateMaterials([])
    }

    // Логируем создание новой расценки
    logger.logFormSubmit('Создание новой расценки', rateData, 'Сборник расценок')
    logger.logCreate('rates', 'new-rate', rateData, `Создана новая расценка "${rateData.name}"`)

    // Используем существующую мутацию с её обработчиками onSuccess/onError
    createMutation.mutate(rateData)
    setIsAddModalVisible(false)
  }

  const handleCloseModal = () => {
    console.log('Modal closed', {
      action: 'modal_close',
      timestamp: new Date().toISOString(),
    })

    setIsModalOpen(false)
    setEditingRate(null)
    setTempRateMaterials([])
    setSelectedCatalogMaterial(undefined)
    setActiveTab('1')
    form.resetFields()
  }

  const handleAddMaterial = (rate: RateWithUnit) => {
    console.log('Add material clicked for rate:', {
      action: 'add_material_to_rate',
      rateId: rate.id,
      rateName: rate.name,
      timestamp: new Date().toISOString(),
    })

    setSelectedRateForMaterial(rate)
    materialForm.resetFields()
    materialForm.setFieldsValue({
      is_active: true,
      category: 'material',
      last_purchase_price: 0,
    })
    setIsMaterialModalOpen(true)
  }

  const handleCloseMaterialModal = () => {
    console.log('Material modal closed', {
      action: 'material_modal_close',
      timestamp: new Date().toISOString(),
    })

    setIsMaterialModalOpen(false)
    setSelectedRateForMaterial(null)
    setEditingMaterial(null)
    materialForm.resetFields()
  }

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields()

      console.log('🔵 Form submitted', {
        action: 'form_submit',
        values,
        editingRate: editingRate?.id,
        tempMaterialsCount: tempRateMaterials.length,
        tempMaterials: tempRateMaterials.map(m => ({
          id: m.id,
          originalId: (m as any).originalId,
          code: m.code,
          name: m.name,
          consumption: m.consumption
        })),
        timestamp: new Date().toISOString(),
      })

      if (editingRate) {
        console.log('🔵 Updating existing rate:', editingRate.id)
        updateMutation.mutate({
          id: editingRate.id,
          data: values,
        })
      } else {
        console.log('🔵 Creating new rate with materials:', {
          rateData: values,
          materialsCount: tempRateMaterials.length,
          materials: tempRateMaterials
        })
        // Создаем расценку (материалы обработаются в onSuccess колбеке)
        createMutation.mutate(values)
      }
    } catch (error) {
      console.error('❌ Form validation error:', error)
      message.error('Ошибка валидации формы')
    }
  }

  const handleMaterialSubmit = async () => {
    try {
      const values = await materialForm.validateFields()

      console.log('Material form submitted', {
        action: 'material_form_submit',
        values,
        editingMaterial: editingMaterial?.id,
        selectedRateId: selectedRateForMaterial?.id,
        timestamp: new Date().toISOString(),
      })

      // Находим соответствующую единицу измерения
      const unit = units.find(u => u.id === values.unit_id)
      
      if (editingMaterial) {
        // Редактирование существующего материала - TODO: реализовать сохранение в БД
        console.log('Material editing not yet implemented for database persistence')
        message.info('Редактирование материалов будет реализовано позже')
      } else if (selectedRateForMaterial) {
        // Добавление нового материала - TODO: реализовать сохранение в БД
        console.log('Individual material addition not yet implemented for database persistence')
        message.info('Добавление отдельных материалов будет реализовано позже. Используйте добавление через модальное окно расценки.')
      }
      
      handleCloseMaterialModal()
    } catch (error) {
      console.error('Material form validation error:', error)
      message.error('Ошибка валидации формы материала')
    }
  }

  const handleSearch = (value: string) => {
    console.log('Search triggered', {
      action: 'search',
      searchText: value,
      timestamp: new Date().toISOString(),
    })
    // Логируем поиск пользователя
    logger.logView('rates', undefined, `Поиск расценок по запросу: "${value}"`)
    setSearchText(value)
  }

  const handleCategoryFilter = (category: string) => {
    console.log('Category filter changed', {
      action: 'filter_category',
      category,
      timestamp: new Date().toISOString(),
    })
    // Логируем фильтрацию по категории
    logger.logView('rates', undefined, `Фильтрация расценок по категории: "${category}"`)
    setCategoryFilter(category)
  }

  const getCategoryConfig = (category: string) => {
    return (
      categoryOptions.find(option => option.value === category) ||
      categoryOptions[0]
    )
  }

  // Состояние для управления раскрытыми расценками
  const [expandedRates, setExpandedRates] = useState<Set<string>>(new Set())
  const [editingMaterial, setEditingMaterial] = useState<(MaterialWithUnit & { parentRateId?: string }) | null>(null)
  const [tempRateMaterials, setTempRateMaterials] = useState<(MaterialWithUnit & { consumption?: number; originalId?: string })[]>([])
  const [selectedCatalogMaterial, setSelectedCatalogMaterial] = useState<string | undefined>(undefined)
  const [activeTab, setActiveTab] = useState<string>('1')
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set())

  // Функция для переключения состояния развернутой категории
  const toggleCategoryExpansion = (categoryValue: string) => {
    console.log('Toggle category expansion:', {
      action: 'toggle_category',
      categoryValue,
      isCurrentlyExpanded: expandedCategories.has(categoryValue),
      timestamp: new Date().toISOString(),
    })

    setExpandedCategories(prev => {
      const newSet = new Set(prev)
      if (newSet.has(categoryValue)) {
        newSet.delete(categoryValue)
      } else {
        newSet.add(categoryValue)
      }
      return newSet
    })
  }

  // Тестовая функция для добавления примеров материалов
  const addExampleMaterials = (rateId: string) => {
    if (!units.length) return
    
    const exampleMaterials = [
      {
        id: `example-${rateId}-1`,
        code: 'МТ-001',
        name: 'Кирпич облицовочный',
        description: 'Кирпич облицовочный керамический',
        category: 'brick',
        unit_id: units[0]?.id || '',
        unit_name: units[0]?.name || 'шт.',
        unit_short_name: units[0]?.short_name || 'шт.',
        last_purchase_price: 15.50,
        supplier: 'Кирпичный завод но. 1',
        supplier_article: 'КО-150',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        id: `example-${rateId}-2`,
        code: 'МТ-002',
        name: 'Цемент М400',
        description: 'Портландцемент М400 До',
        category: 'concrete',
        unit_id: units[1]?.id || units[0]?.id || '',
        unit_name: units[1]?.name || units[0]?.name || 'кг',
        unit_short_name: units[1]?.short_name || units[0]?.short_name || 'кг',
        last_purchase_price: 280.00,
        supplier: 'Лафарж Цемент',
        supplier_article: 'LF-M400-50',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }
    ]
    
    // TODO: реализовать сохранение примеров материалов в БД
    console.log('Example materials addition not yet implemented for database persistence')
    message.info('Добавление примеров материалов будет реализовано позже')
  }

  // Переключение раскрытия расценки
  const toggleRateExpansion = (rateId: string) => {
    const newExpanded = new Set(expandedRates)
    if (newExpanded.has(rateId)) {
      newExpanded.delete(rateId)
    } else {
      newExpanded.add(rateId)
    }
    setExpandedRates(newExpanded)
  }

  const filteredRates = rates.filter(rate => {
    const matchesSearch =
      !searchText ||
      rate.code.toLowerCase().includes(searchText.toLowerCase()) ||
      rate.name.toLowerCase().includes(searchText.toLowerCase())

    const matchesCategory = !categoryFilter || rate.category === categoryFilter

    return matchesSearch && matchesCategory
  })

  // Фильтруем группы расценок
  const filteredGroups = rateGroups.filter(group => {
    const matchesSearch =
      !searchText ||
      group.contractor.name.toLowerCase().includes(searchText.toLowerCase()) ||
      group.works.some(w => w.name.toLowerCase().includes(searchText.toLowerCase())) ||
      group.materials.some(m => m.name.toLowerCase().includes(searchText.toLowerCase()))

    const rate = rates.find(r => r.id === group.id)
    const matchesCategory = !categoryFilter || (rate && rate.category === categoryFilter)

    return matchesSearch && matchesCategory
  })

  // Функции для расчетов (аналогично консоли)
  const formatCurrency = (amount: number): string => {
    return amount.toLocaleString('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    })
  }

  const getTotalCost = (groups: RateGroup[]): number => {
    return groups.reduce((total, group) => total + group.totalSum, 0)
  }

  const totalCost = getTotalCost(filteredGroups)
  const totalWorksCost = filteredGroups.reduce((sum, group) =>
    sum + group.works.reduce((workSum, work) => workSum + work.total, 0), 0
  )
  const totalMaterialsCost = filteredGroups.reduce((sum, group) =>
    sum + group.materials.reduce((materialSum, material) => materialSum + material.total, 0), 0
  )

  // Типы для иерархических данных
  type HierarchicalDataItem = (RateWithUnit & {
    isParentRate?: boolean;
    isExpanded?: boolean;
  }) | (MaterialWithUnit & {
    isChildMaterial: true;
    parentRateId: string;
    level: number;
    materialIndex: number;
    rateMaterialId?: string;
    consumption?: number;
  });

  // Создаем иерархичную структуру данных
  const createHierarchicalData = () => {
    const result: HierarchicalDataItem[] = []
    
    filteredRates.forEach(rate => {
      // Добавляем основную расценку (работу)
      result.push({
        ...rate,
        isParentRate: true,
        isExpanded: expandedRates.has(rate.id)
      })
      
      // Если расценка раскрыта, добавляем её материалы
      if (expandedRates.has(rate.id)) {
        const rateLinkedMaterials = allRateMaterials[rate.id] || []
        rateLinkedMaterials.forEach((rateMaterial, index) => {
          // Преобразуем RateMaterial в MaterialWithUnit формат
          if (rateMaterial.material) {
            result.push({
              id: rateMaterial.material.id,
              code: rateMaterial.material.code,
              name: rateMaterial.material.name,
              description: rateMaterial.material.description,
              category: 'material', // По умолчанию
              unit_id: rateMaterial.material.unit_id, // Используем единицы измерения от материала
              unit_name: rateMaterial.material.unit_name, // Используем единицы измерения от материала
              unit_short_name: rateMaterial.material.unit_short_name, // Используем единицы измерения от материала
              last_purchase_price: rateMaterial.unit_price,
              is_active: rateMaterial.material.is_active,
              created_at: rateMaterial.created_at,
              updated_at: rateMaterial.updated_at,
              consumption: rateMaterial.consumption,
              isChildMaterial: true,
              parentRateId: rate.id,
              level: 1,
              materialIndex: index,
              rateMaterialId: rateMaterial.id // Для обновлений
            })
          }
        })
      }
    })
    
    return result
  }

  const hierarchicalData = createHierarchicalData()

  // Обработчики для материалов
  const handleEditMaterial = (material: any) => {
    console.log('Edit material clicked', {
      action: 'edit_material',
      materialId: material.id,
      materialName: material.name,
      parentRateId: material.parentRateId,
      timestamp: new Date().toISOString(),
    })

    // Устанавливаем редактируемый материал и открываем модалку
    setEditingMaterial({ ...material })
    materialForm.setFieldsValue(material)
    setIsMaterialModalOpen(true)
  }

  const handleDeleteMaterial = (material: any) => {
    console.log('Delete material clicked', {
      action: 'delete_material',
      materialId: material.id,
      materialName: material.name,
      parentRateId: material.parentRateId,
      timestamp: new Date().toISOString(),
    })

    // TODO: реализовать удаление материала из БД
    console.log('Material deletion not yet implemented for database persistence')
    message.info('Удаление материалов будет реализовано позже')
  }

  const columns = [
    {
      title: 'Код/Наименование',
      dataIndex: 'code',
      key: 'code',
      render: (code: string, record: any) => {
        const isParent = !record.isChildMaterial
        const marginLeft = isParent ? 0 : 32
        
        if (isParent) {
          // Родительская расценка (работа)
          return (
            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
              <Button
                type="text"
                size="small"
                icon={record.isExpanded ? <DownOutlined /> : <RightOutlined />}
                onClick={() => toggleRateExpansion(record.id)}
                style={{ padding: 0, minWidth: 20 }}
              />
              <div style={{ fontWeight: 600, color: '#1890ff' }}>
                <div>{code}</div>
                <div style={{ fontSize: '12px', color: '#666', fontWeight: 'normal' }}>
                  {record.name}
                </div>
              </div>
            </div>
          )
        } else {
          // Дочерний материал
          return (
            <div style={{ marginLeft, color: '#666' }}>
              <div style={{ fontSize: '12px' }}>├─ {code}</div>
              <div style={{ fontSize: '11px', color: '#999' }}>{record.name}</div>
            </div>
          )
        }
      },
    },
    {
      title: 'Описание',
      dataIndex: 'description',
      key: 'description',
      ellipsis: true,
      render: (description: string, record: any) => (
        <span style={{ color: record.isChildMaterial ? '#999' : 'inherit' }}>
          {description || '-'}
        </span>
      ),
    },
    {
      title: 'Состав материалов',
      key: 'materials_composition',
      width: 320,
      render: (_: any, record: HierarchicalDataItem) => {
        if ('isChildMaterial' in record && record.isChildMaterial) {
          return null
        }
        
        // Найти все материалы для этой расценки из hierarchicalData
        const rateMaterials = hierarchicalData.filter(item => 
          'isChildMaterial' in item && item.isChildMaterial && 
          'parentRateId' in item && item.parentRateId === record.id
        )
        
        console.log('Materials for rate', record.id, {
          rateMaterials,
          allRateMaterials,
          hierarchicalDataCount: hierarchicalData.length,
          fromAllRateMaterials: allRateMaterials[record.id]
        })
        
        if (rateMaterials.length === 0) {
          return (
            <div style={{ 
              padding: '8px 12px', 
              backgroundColor: '#fafafa', 
              border: '1px dashed #d9d9d9', 
              borderRadius: '6px',
              textAlign: 'center'
            }}>
              <span style={{ color: '#999', fontSize: '12px' }}>
                📦 Материалы не добавлены
              </span>
            </div>
          )
        }
        
        return (
          <div style={{ 
            fontSize: '11px', 
            backgroundColor: '#f6ffed', 
            border: '1px solid #b7eb8f', 
            borderRadius: '6px',
            padding: '8px'
          }}>
            <div style={{ 
              fontWeight: 600, 
              color: '#52c41a', 
              marginBottom: '6px',
              fontSize: '12px'
            }}>
              📦 Материалов: {rateMaterials.length}
            </div>
            
            {rateMaterials.map((material, index) => {
              if (!('isChildMaterial' in material) || !material.isChildMaterial) return null
              
              const consumption = material.consumption || 1
              const price = material.last_purchase_price || 0
              const totalCost = price * consumption
              
              return (
                <div 
                  key={material.id} 
                  style={{ 
                    marginBottom: index < rateMaterials.length - 1 ? 6 : 0,
                    padding: '4px 6px',
                    backgroundColor: 'white',
                    border: '1px solid #e8f5e8',
                    borderRadius: '4px'
                  }}
                >
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center' 
                  }}>
                    <div style={{ flex: 1 }}>
                      <div style={{ color: '#1890ff', fontWeight: 600, fontSize: '12px' }}>
                        {material.code}
                      </div>
                      <div style={{ 
                        color: '#262626', 
                        fontSize: '11px',
                        maxWidth: '180px',
                        whiteSpace: 'nowrap',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                      }}>
                        {material.name}
                      </div>
                    </div>
                    <div style={{ textAlign: 'right', marginLeft: '8px' }}>
                      <div style={{ color: '#722ed1', fontWeight: 600, fontSize: '11px' }}>
                        {consumption} {material.unit_short_name}
                      </div>
                      <div style={{ color: '#52c41a', fontWeight: 600, fontSize: '11px' }}>
                        {totalCost.toFixed(2)} ₽
                      </div>
                    </div>
                  </div>
                </div>
              )
            })}
            
            <div style={{ 
              marginTop: 8, 
              paddingTop: 6, 
              borderTop: '2px solid #52c41a',
              textAlign: 'center'
            }}>
              <span style={{ color: '#52c41a', fontWeight: 700, fontSize: '13px' }}>
                💰 Итого: {rateMaterials.reduce((sum, m) => {
                  if ('isChildMaterial' in m && m.isChildMaterial) {
                    return sum + (m.last_purchase_price || 0) * (m.consumption || 1)
                  }
                  return sum
                }, 0).toFixed(2)} ₽
              </span>
            </div>
          </div>
        )
      },
    },
    {
      title: 'Ед. изм.',
      dataIndex: 'unit_short_name',
      key: 'unit_short_name',
      width: 80,
      sorter: (a: any, b: any) => a.unit_short_name.localeCompare(b.unit_short_name),
    },
    {
      title: 'Расход',
      key: 'consumption',
      width: 100,
      render: (_: any, record: HierarchicalDataItem) => {
        if ('isChildMaterial' in record && record.isChildMaterial && record.consumption) {
          return (
            <span style={{ color: '#1890ff', fontWeight: 500 }}>
              {record.consumption} {record.unit_short_name}
            </span>
          )
        }
        return ('isChildMaterial' in record && record.isChildMaterial) ? '1 ед.' : '—'
      },
    },
    {
      title: 'Цена',
      key: 'price',
      width: 120,
      render: (_: any, record: HierarchicalDataItem) => {
        if ('isChildMaterial' in record && record.isChildMaterial) {
          const price = record.last_purchase_price || 0
          const consumption = record.consumption || 1
          const totalCost = price * consumption
          
          return (
            <div>
              <div>{price.toFixed(2)} ₽/{record.unit_short_name}</div>
              {consumption !== 1 && (
                <div style={{ fontSize: '11px', color: '#666' }}>
                  Итого: {totalCost.toFixed(2)} ₽
                </div>
              )}
            </div>
          )
        }
        
        // Для родительских расценок - показать базовую цену + стоимость материалов
        const rateMaterials = hierarchicalData.filter(item => 
          'isChildMaterial' in item && item.isChildMaterial && 
          'parentRateId' in item && item.parentRateId === record.id
        )
        const materialsCost = rateMaterials.reduce((sum, m) => {
          if ('isChildMaterial' in m && m.isChildMaterial) {
            return sum + (m.last_purchase_price || 0) * (m.consumption || 1)
          }
          return sum
        }, 0)
        const totalCost = ('base_price' in record ? record.base_price : 0) + materialsCost
        
        return (
          <div>
            <div style={{ fontWeight: 600 }}>
              {totalCost.toFixed(2)} ₽
            </div>
            <div style={{ fontSize: '11px', color: '#666' }}>
              Работа: {('base_price' in record ? record.base_price : 0).toFixed(2)} ₽
            </div>
            {materialsCost > 0 && (
              <div style={{ fontSize: '11px', color: '#52c41a' }}>
                Материалы: {materialsCost.toFixed(2)} ₽
              </div>
            )}
          </div>
        )
      },
      sorter: (a: HierarchicalDataItem, b: HierarchicalDataItem) => {
        let priceA, priceB
        
        if ('isChildMaterial' in a && a.isChildMaterial) {
          priceA = a.last_purchase_price || 0
        } else {
          const aMaterials = hierarchicalData.filter(item => 
            'isChildMaterial' in item && item.isChildMaterial && 
            'parentRateId' in item && item.parentRateId === a.id
          )
          const aMaterialsCost = aMaterials.reduce((sum, m) => {
            if ('isChildMaterial' in m && m.isChildMaterial) {
              return sum + (m.last_purchase_price || 0) * (m.consumption || 1)
            }
            return sum
          }, 0)
          priceA = ('base_price' in a ? a.base_price : 0) + aMaterialsCost
        }
        
        if ('isChildMaterial' in b && b.isChildMaterial) {
          priceB = b.last_purchase_price || 0
        } else {
          const bMaterials = hierarchicalData.filter(item => 
            'isChildMaterial' in item && item.isChildMaterial && 
            'parentRateId' in item && item.parentRateId === b.id
          )
          const bMaterialsCost = bMaterials.reduce((sum, m) => {
            if ('isChildMaterial' in m && m.isChildMaterial) {
              return sum + (m.last_purchase_price || 0) * (m.consumption || 1)
            }
            return sum
          }, 0)
          priceB = ('base_price' in b ? b.base_price : 0) + bMaterialsCost
        }
        
        return priceA - priceB
      },
    },
    {
      title: 'Категория',
      dataIndex: 'category',
      key: 'category',
      width: 180,
      render: (category: string, record: any) => {
        if (record.isChildMaterial) {
          const materialCategories = {
            concrete: { label: 'Бетон', color: 'blue' },
            metal: { label: 'Металл', color: 'volcano' },
            brick: { label: 'Кирпич', color: 'orange' },
            insulation: { label: 'Утеплители', color: 'green' },
            finishing: { label: 'Отделочные', color: 'purple' },
            material: { label: 'Материал', color: 'red' },
            other: { label: 'Прочие', color: 'default' }
          }
          const config = materialCategories[category as keyof typeof materialCategories] || materialCategories.other
          return <Tag color={config.color}>{config.label}</Tag>
        }
        const config = getCategoryConfig(category)
        return <Tag color={config.color}>{config.label}</Tag>
      },
      sorter: (a: any, b: any) => a.category.localeCompare(b.category),
    },
    {
      title: 'Подкатегория/Поставщик',
      key: 'subcategory_supplier',
      render: (_: any, record: any) => {
        if (record.isChildMaterial) {
          return record.supplier || '-'
        }
        return record.subcategory || '-'
      },
    },
    {
      title: 'Активность',
      dataIndex: 'is_active',
      key: 'is_active',
      width: 100,
      render: (isActive: boolean, record: any) => (
        <span
          style={{
            color: isActive ? '#52c41a' : '#ff4d4f',
            fontWeight: 500,
            opacity: record.isChildMaterial ? 0.7 : 1
          }}
        >
          {isActive ? 'Активна' : 'Неактивна'}
        </span>
      ),
      sorter: (a: any, b: any) => Number(a.is_active) - Number(b.is_active),
    },
    {
      title: 'Дата создания',
      dataIndex: 'created_at',
      key: 'created_at',
      width: 140,
      render: (date: string, record: any) => (
        <span style={{ opacity: record.isChildMaterial ? 0.7 : 1 }}>
          {new Date(date).toLocaleDateString('ru-RU')}
        </span>
      ),
      sorter: (a: any, b: any) =>
        new Date(a.created_at).getTime() - new Date(b.created_at).getTime(),
    },
    {
      title: 'Действия',
      key: 'actions',
      width: 180,
      render: (_: unknown, record: any) => {
        if (record.isChildMaterial) {
          return (
            <Space>
              <Button
                type="text"
                size="small"
                icon={<EditOutlined />}
                title="Редактировать материал"
                style={{ color: '#1890ff' }}
                onClick={() => handleEditMaterial(record)}
              />
              <Button
                type="text"
                size="small"
                danger
                icon={<DeleteOutlined />}
                title="Удалить материал"
                onClick={() => handleDeleteMaterial(record)}
              />
            </Space>
          )
        }
        
        return (
          <Space>
            <Button
              type="text"
              size="small"
              icon={<PlusOutlined />}
              onClick={() => handleAddMaterial(record)}
              title="Добавить материал"
              style={{ color: '#52c41a' }}
            />
            <Button
              type="text"
              size="small"
              onClick={() => addExampleMaterials(record.id)}
              title="Добавить примеры материалов"
              style={{ color: '#1890ff', fontSize: '10px' }}
            >
              Примеры
            </Button>
            <Button
              type="text"
              size="small"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record)}
              title="Редактировать расценку"
            />
            <Popconfirm
              title="Удалить расценку?"
              description="Это действие нельзя отменить. Все связанные материалы также будут удалены."
              onConfirm={() => handleDelete(record.id)}
              okText="Да"
              cancelText="Отмена"
            >
              <Button
                type="text"
                size="small"
                danger
                icon={<DeleteOutlined />}
                title="Удалить расценку"
              />
            </Popconfirm>
          </Space>
        )
      },
    },
  ]

  return (
    <div style={{
      height: 'calc(100vh - 96px)',
      display: 'flex',
      flexDirection: 'column',
      overflow: 'hidden'
    }}>
      {/* Заголовок и кнопки */}
      <div className="modern-page-header" style={{ flexShrink: 0, paddingBottom: 16 }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: 16
        }}>
          <div className="modern-page-title">
            <div className="modern-page-icon rates">
              <BuildOutlined />
            </div>
            <div>
              <Title level={2} style={{ margin: 0, color: '#1a1a1a', fontSize: 28, fontWeight: 700 }}>
                Сборник расценок
              </Title>
              <div style={{ color: '#64748b', fontSize: 14, marginTop: 4 }}>
                Управление расценками и материалами
              </div>
            </div>
          </div>
          <Button
            type="primary"
            size="large"
            icon={<PlusOutlined />}
            onClick={handleAddNewGroup}
            style={{
              borderRadius: 8,
              height: 44,
              paddingLeft: 24,
              paddingRight: 24,
              fontSize: 15,
              fontWeight: 600
            }}
          >
            Добавить расценку
          </Button>
        </div>

        {/* Современные фильтры */}
        <Card style={{ borderRadius: 12, boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={12} md={8} lg={6}>
              <div style={{ marginBottom: 4, fontSize: 13, fontWeight: 500, color: '#374151' }}>Категория</div>
              <Select
                style={{ width: '100%' }}
                placeholder="Все категории"
                allowClear
                showSearch
                value={categoryFilter}
                onChange={handleCategoryFilter}
                filterOption={(input, option) => {
                  const text = (option?.children || option?.label)?.toString() || ""
                  return text.toLowerCase().includes(input.toLowerCase())
                }}
              >
                {categoryOptions.map(opt => (
                  <Select.Option key={opt.value} value={opt.value}>
                    <Tag color={opt.color} style={{ marginRight: 8 }}>{opt.label}</Tag>
                  </Select.Option>
                ))}
              </Select>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <div style={{ marginBottom: 4, fontSize: 13, fontWeight: 500, color: '#374151' }}>Поиск</div>
              <Search
                placeholder="Поиск по коду или названию..."
                allowClear
                onSearch={handleSearch}
                onChange={(e) => handleSearch(e.target.value)}
                style={{ width: '100%' }}
              />
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <div style={{ marginBottom: 4, fontSize: 13, fontWeight: 500, color: '#374151' }}>Единица измерения</div>
              <Select
                style={{ width: '100%' }}
                placeholder="Все единицы"
                allowClear
                showSearch
                filterOption={(input, option) => {
                  const text = (option?.children || option?.label)?.toString() || ""
                  return text.toLowerCase().includes(input.toLowerCase())
                }}
              >
                {units.map(unit => (
                  <Select.Option key={unit.id} value={unit.short_name}>
                    {unit.name} ({unit.short_name})
                  </Select.Option>
                ))}
              </Select>
            </Col>
            <Col xs={24} sm={12} md={8} lg={6}>
              <div style={{ marginBottom: 4, fontSize: 13, fontWeight: 500, color: '#374151' }}>Статистика</div>
              <div style={{ display: 'flex', gap: 16 }}>
                <Statistic
                  title="Всего"
                  value={filteredGroups.length}
                  suffix="расценок"
                  valueStyle={{ fontSize: 16, color: '#1890ff' }}
                />
                <Statistic
                  title="Общая сумма"
                  value={totalCost}
                  formatter={(value) => formatCurrency(Number(value))}
                  valueStyle={{ fontSize: 16, color: '#52c41a' }}
                />
              </div>
            </Col>
          </Row>
        </Card>
      </div>

      {/* Контент с расценками */}
      <div style={{ flex: 1, overflow: 'hidden', minHeight: 0 }}>
        {filteredGroups.length === 0 ? (
          <Card style={{ textAlign: 'center', borderRadius: 12, margin: '20px 0' }}>
            <div style={{ padding: '40px 20px' }}>
              <FileTextOutlined style={{ fontSize: 48, color: '#d9d9d9', marginBottom: 16 }} />
              <Title level={4} style={{ color: '#999', marginBottom: 8 }}>
                {isLoading ? 'Загрузка расценок...' : 'Расценки не найдены'}
              </Title>
              <Text type="secondary">
                {isLoading ? 'Пожалуйста, подождите...' : 'Начните с создания новой расценки'}
              </Text>
              {!isLoading && (
                <div style={{ marginTop: 20 }}>
                  <Button type="primary" icon={<PlusOutlined />} onClick={handleAddNewGroup}>
                    Создать первую расценку
                  </Button>
                </div>
              )}
            </div>
          </Card>
        ) : (
          <div className="rates-categories-container">
            {/* Полный список всех категорий */}
            {categoryOptions.map(categoryOption => {
              const categoryRates = filteredGroups.filter(group => {
                const rate = rates.find(r => r.id === group.id)
                return rate?.category === categoryOption.value
              })

              const isExpanded = expandedCategories.has(categoryOption.value)
              const hasRates = categoryRates.length > 0

              return (
                <div key={categoryOption.value} className="category-section" style={{ marginBottom: 24 }}>
                  {/* Кликабельный заголовок категории */}
                  <div
                    style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: '16px 20px',
                      background: hasRates
                        ? `linear-gradient(135deg, ${categoryOption.color}15, ${categoryOption.color}08)`
                        : '#f8f9fa',
                      borderRadius: 12,
                      border: hasRates
                        ? `1px solid ${categoryOption.color}30`
                        : '1px solid #e9ecef',
                      cursor: hasRates ? 'pointer' : 'default',
                      transition: 'all 0.2s ease',
                      opacity: hasRates ? 1 : 0.6
                    }}
                    onClick={() => hasRates && toggleCategoryExpansion(categoryOption.value)}
                    onMouseEnter={(e) => {
                      if (hasRates) {
                        e.currentTarget.style.background = `linear-gradient(135deg, ${categoryOption.color}25, ${categoryOption.color}15)`
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (hasRates) {
                        e.currentTarget.style.background = `linear-gradient(135deg, ${categoryOption.color}15, ${categoryOption.color}08)`
                      }
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                      {hasRates && (
                        <div style={{
                          width: 20,
                          height: 20,
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          color: categoryOption.color
                        }}>
                          {isExpanded ? <DownOutlined /> : <RightOutlined />}
                        </div>
                      )}
                      <Tag color={categoryOption.color} style={{
                        margin: 0,
                        fontSize: 13,
                        fontWeight: 600,
                        padding: '4px 12px',
                        borderRadius: 8
                      }}>
                        {categoryOption.label}
                      </Tag>
                      <Text style={{ fontSize: 14, color: hasRates ? '#64748b' : '#999' }}>
                        {hasRates
                          ? `${categoryRates.length} расценок • ${formatCurrency(categoryRates.reduce((sum, group) => sum + group.totalSum, 0))}`
                          : 'Нет расценок'
                        }
                      </Text>
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                      {hasRates && isExpanded && (
                        <Button
                          type="primary"
                          size="small"
                          icon={<PlusOutlined />}
                          onClick={(e) => {
                            e.stopPropagation()
                            // Создаем новую расценку с предустановленной категорией
                            setEditingRate(null)
                            form.resetFields()
                            form.setFieldsValue({
                              is_active: true,
                              category: categoryOption.value,
                              base_price: 0,
                            })
                            setTempRateMaterials([])
                            setActiveTab('1')
                            setIsModalOpen(true)
                          }}
                          style={{ borderRadius: 6 }}
                        >
                          Добавить расценку
                        </Button>
                      )}
                      {!hasRates && (
                        <Button
                          type="dashed"
                          size="small"
                          icon={<PlusOutlined />}
                          onClick={(e) => {
                            e.stopPropagation()
                            // Создаем новую расценку с предустановленной категорией
                            setEditingRate(null)
                            form.resetFields()
                            form.setFieldsValue({
                              is_active: true,
                              category: categoryOption.value,
                              base_price: 0,
                            })
                            setTempRateMaterials([])
                            setActiveTab('1')
                            setIsModalOpen(true)
                          }}
                          style={{ borderRadius: 6 }}
                        >
                          Создать первую расценку
                        </Button>
                      )}
                    </div>
                  </div>

                  {/* Таблица расценок категории (показывается только если категория развернута) */}
                  {isExpanded && hasRates && (
                    <Card style={{ borderRadius: 12, overflow: 'hidden', border: `1px solid ${categoryOption.color}20`, marginTop: 16 }}>
                    <div className="modern-table" style={{ overflow: 'hidden' }}>
                      <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                        <thead>
                          <tr style={{
                            background: `linear-gradient(135deg, ${categoryOption.color}, ${categoryOption.color}dd)`,
                            color: 'white'
                          }}>
                            <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 600, fontSize: 13, border: 'none' }}>Код</th>
                            <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 600, fontSize: 13, border: 'none' }}>Наименование</th>
                            <th style={{ padding: '12px 16px', textAlign: 'center', fontWeight: 600, fontSize: 13, border: 'none' }}>Ед. изм.</th>
                            <th style={{ padding: '12px 16px', textAlign: 'right', fontWeight: 600, fontSize: 13, border: 'none' }}>Цена работ</th>
                            <th style={{ padding: '12px 16px', textAlign: 'right', fontWeight: 600, fontSize: 13, border: 'none' }}>Материалы</th>
                            <th style={{ padding: '12px 16px', textAlign: 'right', fontWeight: 600, fontSize: 13, border: 'none' }}>Итого</th>
                            <th style={{ padding: '12px 16px', textAlign: 'center', fontWeight: 600, fontSize: 13, border: 'none', width: 120 }}>Действия</th>
                          </tr>
                        </thead>
                        <tbody>
                          {categoryRates.map((group, index) => {
                            const rate = rates.find(r => r.id === group.id)
                            const isExpanded = expandedRates.has(group.id)
                            const worksCost = group.works.reduce((sum, w) => sum + w.total, 0)
                            const materialsCost = group.materials.reduce((sum, m) => sum + m.total, 0)

                            return (
                              <React.Fragment key={group.id}>
                                <tr
                                  style={{
                                    backgroundColor: index % 2 === 0 ? '#fafafa' : 'white',
                                    borderBottom: '1px solid #f0f0f0',
                                    cursor: 'pointer',
                                    transition: 'background-color 0.2s ease'
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.backgroundColor = `${categoryOption.color}10`
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = index % 2 === 0 ? '#fafafa' : 'white'
                                  }}
                                  onClick={() => toggleRateExpansion(group.id)}
                                >
                                  <td style={{ padding: '12px 16px', fontSize: 13, fontWeight: 600, color: '#1890ff' }}>
                                    {rate?.code || '-'}
                                  </td>
                                  <td style={{ padding: '12px 16px' }}>
                                    <div>
                                      <div style={{ fontSize: 14, fontWeight: 600, color: '#1a1a1a', marginBottom: 2 }}>
                                        {group.contractor.name}
                                      </div>
                                      {rate?.description && (
                                        <div style={{ fontSize: 12, color: '#64748b', lineHeight: 1.3 }}>
                                          {rate.description.length > 80
                                            ? `${rate.description.substring(0, 80)}...`
                                            : rate.description
                                          }
                                        </div>
                                      )}
                                      {group.materials.length > 0 && (
                                        <div style={{ fontSize: 11, color: '#52c41a', marginTop: 4 }}>
                                          📦 {group.materials.length} материалов
                                        </div>
                                      )}
                                    </div>
                                  </td>
                                  <td style={{ padding: '12px 16px', textAlign: 'center', fontSize: 13 }}>
                                    {group.contractor.unit}
                                  </td>
                                  <td style={{ padding: '12px 16px', textAlign: 'right', fontSize: 14, fontWeight: 600, color: '#1890ff' }}>
                                    {formatCurrency(worksCost)}
                                  </td>
                                  <td style={{ padding: '12px 16px', textAlign: 'right', fontSize: 14, fontWeight: 600, color: '#52c41a' }}>
                                    {formatCurrency(materialsCost)}
                                  </td>
                                  <td style={{ padding: '12px 16px', textAlign: 'right', fontSize: 16, fontWeight: 700, color: '#1a1a1a' }}>
                                    {formatCurrency(group.totalSum)}
                                  </td>
                                  <td style={{ padding: '12px 16px', textAlign: 'center' }} onClick={(e) => e.stopPropagation()}>
                                    <Space>
                                      <Button
                                        type="text"
                                        size="small"
                                        icon={<EditOutlined />}
                                        onClick={(e) => {
                                          e.stopPropagation()
                                          handleEditGroup(group.id)
                                        }}
                                        style={{ color: '#1890ff' }}
                                        title="Редактировать"
                                      />
                                      <Popconfirm
                                        title="Удалить расценку?"
                                        description="Это действие нельзя отменить"
                                        onConfirm={(e) => {
                                          e?.stopPropagation()
                                          handleDeleteGroup(group.id)
                                        }}
                                        okText="Да"
                                        cancelText="Отмена"
                                        onClick={(e) => e?.stopPropagation()}
                                      >
                                        <Button
                                          type="text"
                                          size="small"
                                          danger
                                          icon={<DeleteOutlined />}
                                          onClick={(e) => e.stopPropagation()}
                                          title="Удалить"
                                        />
                                      </Popconfirm>
                                    </Space>
                                  </td>
                                </tr>

                                {/* Расширенная информация о материалах */}
                                {isExpanded && group.materials.length > 0 && (
                                  <tr style={{ backgroundColor: `${categoryOption.color}05` }}>
                                    <td colSpan={7} style={{ padding: '16px', border: 'none' }}>
                                      <div style={{
                                        display: 'grid',
                                        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                                        gap: 12
                                      }}>
                                        {group.materials.map((material, matIndex) => (
                                          <div key={matIndex} style={{
                                            padding: '12px',
                                            backgroundColor: 'white',
                                            borderRadius: 8,
                                            border: '1px solid #e9ecef',
                                            boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
                                          }}>
                                            <div style={{
                                              display: 'flex',
                                              justifyContent: 'space-between',
                                              alignItems: 'flex-start',
                                              marginBottom: 8
                                            }}>
                                              <div style={{ flex: 1 }}>
                                                <div style={{ fontSize: 13, fontWeight: 600, color: '#1a1a1a', marginBottom: 2 }}>
                                                  {material.name}
                                                </div>
                                                <div style={{ fontSize: 11, color: '#64748b' }}>
                                                  {material.materialType && `${material.materialType} • `}
                                                  {material.volume} {material.unit} × {material.consumptionRate}
                                                </div>
                                              </div>
                                              <div style={{ textAlign: 'right' }}>
                                                <div style={{ fontSize: 13, fontWeight: 600, color: '#52c41a' }}>
                                                  {formatCurrency(material.total)}
                                                </div>
                                                <div style={{ fontSize: 11, color: '#64748b' }}>
                                                  {formatCurrency(material.materialPrice)}/{material.unit}
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        ))}
                                      </div>
                                    </td>
                                  </tr>
                                )}
                              </React.Fragment>
                            )
                          })}
                        </tbody>
                      </table>
                    </div>
                    </Card>
                  )}
                </div>
              )
            })}
          </div>
        )}
      </div>


      {/* Модальное окно добавления */}
      <AddRateModal
        visible={isAddModalVisible}
        onCancel={() => setIsAddModalVisible(false)}
        onSave={handleSaveNewGroup}
      />

      {/* Модальное окно редактирования расценки */}
      <Modal
        title={editingRate ? 'Редактирование расценки' : 'Новая расценка'}
        open={isModalOpen}
        onCancel={handleCloseModal}
        width={1000}
        footer={[
          <Button key="cancel" onClick={handleCloseModal}>
            Отмена
          </Button>,
          <Button
            key="submit"
            type="primary"
            loading={createMutation.isPending || updateMutation.isPending}
            onClick={handleSubmit}
          >
            {editingRate ? 'Сохранить' : 'Создать'}
          </Button>,
        ]}
      >
        <Tabs activeKey={activeTab} onChange={setActiveTab}>
          <Tabs.TabPane tab="Основная информация" key="1">
            <Form form={form} layout="vertical">
              <Row gutter={16}>
                <Col span={8}>
                  <Form.Item
                    label="Код"
                    name="code"
                    rules={[{ required: true, message: 'Введите код расценки' }]}
                  >
                    <Input placeholder="Например: РАБ-001" />
                  </Form.Item>
                </Col>
                <Col span={16}>
                  <Form.Item
                    label="Наименование"
                    name="name"
                    rules={[{ required: true, message: 'Введите наименование' }]}
                  >
                    <Input placeholder="Название расценки" />
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={24}>
                  <Form.Item label="Описание" name="description">
                    <Input.TextArea rows={3} placeholder="Описание работ" />
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={8}>
                  <Form.Item
                    label="Единица измерения"
                    name="unit_id"
                    rules={[{ required: true, message: 'Выберите единицу' }]}
                  >
                    <Select
                      placeholder="Выберите единицу"
                      showSearch
                      filterOption={(input, option) =>
                        (option?.children || '')
                          .toString()
                          .toLowerCase()
                          .includes(input.toLowerCase())
                      }
                    >
                      {units.map(unit => (
                        <Select.Option key={unit.id} value={unit.id}>
                          {unit.name} ({unit.short_name})
                        </Select.Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    label="Базовая стоимость"
                    name="base_price"
                    rules={[{ required: true, message: 'Введите стоимость' }]}
                  >
                    <InputNumber
                      min={0}
                      step={0.01}
                      style={{ width: '100%' }}
                      placeholder="0.00"
                      addonAfter="₽"
                    />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    label="Категория"
                    name="category"
                    rules={[{ required: true, message: 'Выберите категорию' }]}
                  >
                    <Select
                      placeholder="Выберите категорию"
                      onChange={(newCategory) => {
                        // Регенерируем код при изменении категории (только для новых расценок)
                        if (!editingRate) {
                          const existingCodes = rates.map(r => r.code)
                          const generatedCode = generateRateCode(newCategory, existingCodes)
                          form.setFieldsValue({ code: generatedCode })

                          console.log('Category changed, code regenerated:', {
                            action: 'category_change_code_regenerate',
                            newCategory,
                            generatedCode,
                            timestamp: new Date().toISOString(),
                          })
                        }
                      }}
                    >
                      {categoryOptions.map(cat => (
                        <Select.Option key={cat.value} value={cat.value}>
                          <Tag color={cat.color}>{cat.label}</Tag>
                        </Select.Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item label="Подкатегория" name="subcategory">
                    <Input placeholder="Подкатегория (опционально)" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item label="Активность" name="is_active" valuePropName="checked">
                    <Switch checkedChildren="Активна" unCheckedChildren="Неактивна" />
                  </Form.Item>
                </Col>
              </Row>
            </Form>
          </Tabs.TabPane>

          <Tabs.TabPane tab={`Материалы (${tempRateMaterials.length})`} key="2">
            <div style={{ marginBottom: 16 }}>
              <Button
                type="dashed"
                onClick={addTempMaterial}
                icon={<PlusOutlined />}
                style={{ width: '100%' }}
              >
                Добавить новый материал
              </Button>
            </div>

            <div style={{ marginBottom: 16 }}>
              <Select
                showSearch
                allowClear
                style={{ width: '100%' }}
                placeholder={materialsLoading ? "Загрузка материалов..." : "Добавить материал из справочника"}
                optionFilterProp="children"
                onChange={addMaterialFromCatalog}
                value={selectedCatalogMaterial}
                disabled={materialsLoading || materials.length === 0}
                filterOption={(input, option) =>
                  (option?.children || '')
                    .toString()
                    .toLowerCase()
                    .includes(input.toLowerCase())
                }
                notFoundContent={materialsLoading ? "Загрузка..." : materials.length === 0 ? "Нет материалов в справочнике" : "Не найдено"}
              >
                {materials.map(material => (
                  <Select.Option key={material.id} value={material.id}>
                    {material.code} - {material.name} ({material.unit_short_name})
                  </Select.Option>
                ))}
              </Select>
            </div>

            <div style={{ maxHeight: 400, overflowY: 'auto' }}>
              {tempRateMaterials.length === 0 ? (
                <div style={{ textAlign: 'center', padding: 20, color: '#999' }}>
                  Материалы не добавлены
                </div>
              ) : (
                tempRateMaterials.map((material, index) => (
                  <Card key={material.id} size="small" style={{ marginBottom: 8 }}>
                    <Row gutter={16}>
                      <Col span={6}>
                        <Input
                          placeholder="Код"
                          value={material.code}
                          onChange={e => updateTempMaterial(material.id, 'code', e.target.value)}
                        />
                      </Col>
                      <Col span={10}>
                        <Input
                          placeholder="Наименование"
                          value={material.name}
                          onChange={e => updateTempMaterial(material.id, 'name', e.target.value)}
                        />
                      </Col>
                      <Col span={3}>
                        <InputNumber
                          placeholder="Расход"
                          value={material.consumption}
                          onChange={value => updateTempMaterial(material.id, 'consumption', value)}
                          min={0}
                          step={0.01}
                          style={{ width: '100%' }}
                        />
                      </Col>
                      <Col span={3}>
                        <InputNumber
                          placeholder="Цена"
                          value={material.last_purchase_price}
                          onChange={value => updateTempMaterial(material.id, 'last_purchase_price', value)}
                          min={0}
                          step={0.01}
                          style={{ width: '100%' }}
                        />
                      </Col>
                      <Col span={2}>
                        <Button
                          type="text"
                          danger
                          icon={<DeleteOutlined />}
                          onClick={() => removeTempMaterial(material.id)}
                        />
                      </Col>
                    </Row>
                  </Card>
                ))
              )}
            </div>
          </Tabs.TabPane>
        </Tabs>
      </Modal>

      {/* Модальное окно для материалов */}
      <Modal
        title="Добавление материала"
        open={isMaterialModalOpen}
        onCancel={handleCloseMaterialModal}
        footer={[
          <Button key="cancel" onClick={handleCloseMaterialModal}>
            Отмена
          </Button>,
          <Button
            key="submit"
            type="primary"
            loading={createMaterialMutation.isPending}
            onClick={handleMaterialSubmit}
          >
            Добавить
          </Button>,
        ]}
      >
        <Form form={materialForm} layout="vertical">
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                label="Код"
                name="code"
                rules={[{ required: true, message: 'Введите код' }]}
              >
                <Input placeholder="МАТ-001" />
              </Form.Item>
            </Col>
            <Col span={16}>
              <Form.Item
                label="Наименование"
                name="name"
                rules={[{ required: true, message: 'Введите наименование' }]}
              >
                <Input placeholder="Название материала" />
              </Form.Item>
            </Col>
          </Row>
          <Row gutter={16}>
            <Col span={24}>
              <Form.Item label="Описание" name="description">
                <Input.TextArea rows={2} placeholder="Описание материала" />
              </Form.Item>
            </Col>
          </Row>
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                label="Единица измерения"
                name="unit_id"
                rules={[{ required: true, message: 'Выберите единицу' }]}
              >
                <Select
                  placeholder="Выберите"
                  showSearch
                  filterOption={(input, option) =>
                    (option?.children || '')
                      .toString()
                      .toLowerCase()
                      .includes(input.toLowerCase())
                  }
                >
                  {units.map(unit => (
                    <Select.Option key={unit.id} value={unit.id}>
                      {unit.name} ({unit.short_name})
                    </Select.Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item label="Цена закупки" name="last_purchase_price">
                <InputNumber
                  min={0}
                  step={0.01}
                  style={{ width: '100%' }}
                  placeholder="0.00"
                  addonAfter="₽"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item label="Категория" name="category">
                <Select placeholder="Выберите">
                  <Select.Option value="material">Материал</Select.Option>
                  <Select.Option value="concrete">Бетон</Select.Option>
                  <Select.Option value="metal">Металл</Select.Option>
                  <Select.Option value="brick">Кирпич</Select.Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="Поставщик" name="supplier">
                <Input placeholder="Название поставщика" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label="Артикул поставщика" name="supplier_article">
                <Input placeholder="Артикул" />
              </Form.Item>
            </Col>
          </Row>
          <Form.Item label="Активность" name="is_active" valuePropName="checked">
            <Switch checkedChildren="Активен" unCheckedChildren="Неактивен" />
          </Form.Item>
        </Form>
      </Modal>

    </div>
  )
}

export default Rates

