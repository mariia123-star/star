/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ rate_materials_mapping
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials in .env file')
  console.error('Required: VITE_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testRateWithMaterials() {
  console.log('\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n')

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏...')
    const { data: costCategories, error: costCatError } = await supabase
      .from('cost_categories')
      .select('id, name')
      .limit(1)

    if (costCatError) throw costCatError
    if (!costCategories || costCategories.length === 0) {
      throw new Error('–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –ë–î')
    }

    const costCategoryId = costCategories[0].id
    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${costCategories[0].name} (${costCategoryId})`)

    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...')
    const { data: materials, error: materialsError } = await supabase
      .from('materials')
      .select('id, code, name, last_purchase_price')
      .limit(3)

    if (materialsError) throw materialsError
    if (!materials || materials.length === 0) {
      throw new Error('–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –ë–î')
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${materials.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:`)
    materials.forEach((m, i) => {
      console.log(
        `   ${i + 1}. ${m.code} - ${m.name} (${m.last_purchase_price || 0} —Ä—É–±.)`
      )
    })

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Ü–µ–Ω–∫—É
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Ü–µ–Ω–∫–∏...')
    const testRate = {
      code: `TEST-${Date.now().toString().slice(-6)}`,
      name: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Ü–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
      description:
        '–°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã rate_materials_mapping',
      category: 'general_construction',
      cost_category_id: costCategoryId,
      unit_name: '–º¬≥',
      labor_cost: 1000,
      equipment_cost: 500,
      material_cost: 2000,
      overhead_cost: 350,
      profit: 150,
      total_cost: 4000,
      is_active: true,
    }

    const { data: createdRate, error: createRateError } = await supabase
      .from('rates')
      .insert(testRate)
      .select()
      .single()

    if (createRateError) throw createRateError
    console.log(
      `‚úÖ –†–∞—Å—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${createdRate.code} (ID: ${createdRate.id})`
    )

    // –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏...')
    const rateMaterials = materials.map((material, index) => ({
      rate_id: createdRate.id,
      material_id: material.id,
      consumption: (index + 1) * 0.5, // 0.5, 1.0, 1.5
      unit_price: material.last_purchase_price || 0,
      notes: `–î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–º #${index + 1}`,
    }))

    const { data: createdRateMaterials, error: createRateMaterialsError } =
      await supabase.from('rate_materials_mapping').insert(rateMaterials)
        .select(`
        *,
        material:materials (
          id,
          code,
          name,
          last_purchase_price
        )
      `)

    if (createRateMaterialsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π:', createRateMaterialsError)
      throw createRateMaterialsError
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdRateMaterials.length} —Å–≤—è–∑–µ–π:`)
    createdRateMaterials.forEach((rm, i) => {
      console.log(
        `   ${i + 1}. ${rm.material.code} - —Ä–∞—Å—Ö–æ–¥: ${rm.consumption}, —Ü–µ–Ω–∞: ${rm.unit_price}`
      )
    })

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π...')
    const { data: savedRateMaterials, error: fetchError } = await supabase
      .from('rate_materials_mapping')
      .select(
        `
        *,
        material:materials (
          id,
          code,
          name
        )
      `
      )
      .eq('rate_id', createdRate.id)

    if (fetchError) throw fetchError

    console.log(
      `‚úÖ –í –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedRateMaterials.length} —Å–≤—è–∑–µ–π –¥–ª—è —Ä–∞—Å—Ü–µ–Ω–∫–∏ ${createdRate.code}`
    )
    savedRateMaterials.forEach((rm, i) => {
      console.log(`   ${i + 1}. ${rm.material.code} - ${rm.material.name}`)
    })

    // –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏
    const { error: deleteMappingError } = await supabase
      .from('rate_materials_mapping')
      .delete()
      .eq('rate_id', createdRate.id)

    if (deleteMappingError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π:', deleteMappingError.message)
    } else {
      console.log('‚úÖ –°–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω—ã')
    }

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É —Ä–∞—Å—Ü–µ–Ω–∫—É
    const { error: deleteRateError } = await supabase
      .from('rates')
      .delete()
      .eq('id', createdRate.id)

    if (deleteRateError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ü–µ–Ω–∫–∏:', deleteRateError.message)
    } else {
      console.log('‚úÖ –†–∞—Å—Ü–µ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
    }

    console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
    console.log('‚îÅ'.repeat(60))
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–æ–∫ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
    console.log('–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.')
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message)
    if (error.details) console.error('–î–µ—Ç–∞–ª–∏:', error.details)
    if (error.hint) console.error('–ü–æ–¥—Å–∫–∞–∑–∫–∞:', error.hint)
    process.exit(1)
  }
}

testRateWithMaterials()
